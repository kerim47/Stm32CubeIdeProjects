/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
 char rx_msg [20];
 int ref = 90 ;
 int i = 1;
 int sayi ;
 int swich =0;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void motor_ileri();
void motor_geri();
void motor_fren();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t delay)
{
/* change your code here for the delay in microseconds */
__HAL_TIM_SET_COUNTER(&htim2, 0);
while ((__HAL_TIM_GET_COUNTER(&htim2))<delay);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */




  HAL_TIM_Base_Start(&htim2);//// delay fonksiyonunun timer ı
 // HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//ref = ref - sayi ;

HAL_UART_Receive(&huart1, (uint8_t *)rx_msg,50,10);

//if(rx_msg[0]=='1') // pwm hız kontrol kademeleri
//{
//TIM3->CCR4 = 200;
//}
//if(rx_msg[0]=='2')  // pwm hız kontrol kademeleri
//{
//TIM3->CCR4 = 400;
//}
//if(rx_msg[0]=='3')  // pwm hız kontrol kademeleri
//{
//TIM3->CCR4 = 600;
//}
//if(rx_msg[0]=='4')  // pwm hız kontrol kademeleri
//{
//TIM3->CCR4 = 800;
//}
//if(rx_msg[0]=='5')  // pwm hız kontrol kademeleri
//{
//TIM3->CCR4 = 1000;
//}
//////////////////////////////////ROLE KONTROL ///////////////////////////////////////////////////////////

////for(i=0;i<10;i++)
///// {
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 1);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 1);
// delay(3400);
// // HAL_Delay(3);
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 1);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 1);
// // HAL_Delay(3);
// delay(3400);
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 1);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 1);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
// //HAL_Delay(3);
// delay(3400);
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 1);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 1);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
// // HAL_Delay(3);
// delay(3400);
// //delay(3400);
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
 //}
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 1);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 1);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);



if(rx_msg[0]=='v') // pwm sıfırlama
{
//TIM3->CCR4 = 0;
swich=0;
}

if(rx_msg[0]=='a')
{
	motor_ileri();
	HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin,0);  /////geri hareket
}

if(rx_msg[0]=='b')
{
	motor_geri();
HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin,0); //// firen açma
TIM3->CCR4 = 0;
}

if(rx_msg[0]=='c')
{
	motor_fren();
HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin,0);  ////start stop açma
}

if(rx_msg[0]=='d')
{
HAL_GPIO_WritePin(in4_GPIO_Port, in4_Pin,0);
}


if(rx_msg[0]=='e')
{
HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin,1); ///// ileri kapama
}

if(rx_msg[0]=='f')
{
HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin,1); //// firen kamama
}

if(rx_msg[0]=='g')
{
HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin,1); ////  ////start stop kapama
}

if(rx_msg[0]=='h')
{
HAL_GPIO_WritePin(in4_GPIO_Port, in4_Pin,1);
}

//////////////////////////////////MOSFET KONTROL//////////////////////////////////////////////////////////////
if(rx_msg[0]=='i')
{
HAL_GPIO_WritePin(far1_GPIO_Port, far1_Pin,1);
}
if(rx_msg[0]=='j')
{
HAL_GPIO_WritePin(far2_GPIO_Port, far2_Pin,1);
}
if(rx_msg[0]=='k')
{
HAL_GPIO_WritePin(far3_GPIO_Port,far3_Pin,1);
}
if(rx_msg[0]=='l')
{
HAL_GPIO_WritePin(stop_GPIO_Port,stop_Pin,1);
}
if(rx_msg[0]=='m')
{
HAL_GPIO_WritePin(sinyal_GPIO_Port,sinyal_Pin,1);
}

if(rx_msg[0]=='n')
{
HAL_GPIO_WritePin(far1_GPIO_Port, far1_Pin,0);
}
if(rx_msg[0]=='o')
{
HAL_GPIO_WritePin(far2_GPIO_Port, far2_Pin,0);
}
if(rx_msg[0]=='p')
{
HAL_GPIO_WritePin(far3_GPIO_Port,far3_Pin,0);
}
if(rx_msg[0]=='r')
{
HAL_GPIO_WritePin(stop_GPIO_Port,stop_Pin,0);
}
if(rx_msg[0]=='s')
{
HAL_GPIO_WritePin(sinyal_GPIO_Port,sinyal_Pin,0);
}
///////////////////////////////////////FREN/////////////////////////////////////////////////////////////////////////////////////////////////
//if(rx_msg[0]=='t')
//{
//HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 1);
//HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
//}
//if(rx_msg[0]=='u')
//{
//HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
//HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 1);
//}

////////////////////////////////////////////STEP MOTOR KONTROL ////////////////////////////////////////////////////////////////

//if (sayi< 90)
//{
/////// derecelik geri dönüş yapar
//for(i=0;i<abs(ref);i++)
//{
//HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 1);
//HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
//HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
//HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 1);
//delay(2100);
//// HAL_Delay(3);
//HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
//HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
//HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 1);
//HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 1);
//// HAL_Delay(3);
//delay(2100);
//HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
//HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 1);
//HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 1);
//HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
////HAL_Delay(3);
//delay(2100);
//HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 1);
//HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 1);
//HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
//HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
//// HAL_Delay(3);
//delay(2100);
////delay(3400);
//HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
//HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
//HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
//HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
//}
//}
//
//
// if (sayi>90)
// {
// ///// derecelik ileri dönüş
// for(i=90;i<ref;i++)
// {
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 1);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 1);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
// delay(2100);
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 1);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 1);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
// delay(2100);
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 1);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 1);
// delay(2100);
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 1);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 1);
// delay(2100);
// HAL_GPIO_WritePin(bacak1_GPIO_Port, bacak1_Pin, 0);
// HAL_GPIO_WritePin(bacak2_GPIO_Port, bacak2_Pin, 0);
// HAL_GPIO_WritePin(bacak3_GPIO_Port, bacak3_Pin, 0);
// HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, 0);
// }
// }


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, in1_Pin|in2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, in3_Pin|in4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, bacak1_Pin|bacak2_Pin|bacak3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bacak4_GPIO_Port, bacak4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, far1_Pin|far2_Pin|stop_Pin|far3_Pin
                          |sinyal_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bacak6_GPIO_Port, bacak6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : in1_Pin in2_Pin far1_Pin far2_Pin
                           stop_Pin far3_Pin sinyal_Pin */
  GPIO_InitStruct.Pin = in1_Pin|in2_Pin|far1_Pin|far2_Pin
                          |stop_Pin|far3_Pin|sinyal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : in3_Pin in4_Pin bacak1_Pin bacak2_Pin
                           bacak3_Pin */
  GPIO_InitStruct.Pin = in3_Pin|in4_Pin|bacak1_Pin|bacak2_Pin
                          |bacak3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : bacak4_Pin */
  GPIO_InitStruct.Pin = bacak4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(bacak4_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : bacak5_Pin */
  GPIO_InitStruct.Pin = bacak5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(bacak5_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : bacak6_Pin */
  GPIO_InitStruct.Pin = bacak6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(bacak6_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void motor_ileri()
{
	HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin, 1); // ileri geri kapama
	HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin, 1); // fren serbest bırakma
	HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin, 0); // start stop açma
}
void motor_geri()
{
	HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin, 1); // fren serbest bırakma
	HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin, 0); // geri hareket
}
void motor_fren()
{
	HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin, 0); //// firen açma
	HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin, 1); // start stop kapama
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
