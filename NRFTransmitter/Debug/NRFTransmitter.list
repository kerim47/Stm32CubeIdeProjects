
NRFTransmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004440  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b60  08004b60  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b68  08004b68  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004b70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000184  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb03  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9a  00000000  00000000  0002cbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002e668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000948  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020757  00000000  00000000  0002f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac36  00000000  00000000  000500e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c45cc  00000000  00000000  0005ad1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011f2e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bdc  00000000  00000000  0011f33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045b8 	.word	0x080045b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080045b8 	.word	0x080045b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <NRF24_DelayMicroSeconds+0x3c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <NRF24_DelayMicroSeconds+0x40>)
 800058a:	fba2 2303 	umull	r2, r3, r2, r3
 800058e:	0c9a      	lsrs	r2, r3, #18
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000598:	bf00      	nop
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	60fa      	str	r2, [r7, #12]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1fa      	bne.n	800059a <NRF24_DelayMicroSeconds+0x22>
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028
 80005b8:	165e9f81 	.word	0x165e9f81

080005bc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d008      	beq.n	80005dc <NRF24_csn+0x20>
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <NRF24_csn+0x38>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <NRF24_csn+0x3c>)
 80005d0:	8811      	ldrh	r1, [r2, #0]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fe6f 	bl	80022b8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005da:	e007      	b.n	80005ec <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <NRF24_csn+0x38>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <NRF24_csn+0x3c>)
 80005e2:	8811      	ldrh	r1, [r2, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fe66 	bl	80022b8 <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000bc 	.word	0x200000bc
 80005f8:	200000c0 	.word	0x200000c0

080005fc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d008      	beq.n	800061c <NRF24_ce+0x20>
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <NRF24_ce+0x38>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <NRF24_ce+0x3c>)
 8000610:	8811      	ldrh	r1, [r2, #0]
 8000612:	2201      	movs	r2, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fe4f 	bl	80022b8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800061a:	e007      	b.n	800062c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <NRF24_ce+0x38>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a05      	ldr	r2, [pc, #20]	; (8000638 <NRF24_ce+0x3c>)
 8000622:	8811      	ldrh	r1, [r2, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fe46 	bl	80022b8 <HAL_GPIO_WritePin>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000bc 	.word	0x200000bc
 8000638:	200000c2 	.word	0x200000c2

0800063c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff ffb8 	bl	80005bc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 031f 	and.w	r3, r3, #31
 8000652:	b2db      	uxtb	r3, r3
 8000654:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000656:	f107 010c 	add.w	r1, r7, #12
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	2201      	movs	r2, #1
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <NRF24_read_register+0x4c>)
 8000660:	f002 fb15 	bl	8002c8e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	1c59      	adds	r1, r3, #1
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <NRF24_read_register+0x4c>)
 8000670:	f002 fc49 	bl	8002f06 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000674:	7b7b      	ldrb	r3, [r7, #13]
 8000676:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff ff9f 	bl	80005bc <NRF24_csn>
	return retData;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000c4 	.word	0x200000c4

0800068c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff8d 	bl	80005bc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 031f 	and.w	r3, r3, #31
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006ac:	f107 010c 	add.w	r1, r7, #12
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <NRF24_read_registerN+0x4c>)
 80006b6:	f002 faea 	bl	8002c8e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <NRF24_read_registerN+0x4c>)
 80006c4:	f002 fc1f 	bl	8002f06 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ff77 	bl	80005bc <NRF24_csn>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000c4 	.word	0x200000c4

080006dc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff ff65 	bl	80005bc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000700:	f107 010c 	add.w	r1, r7, #12
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	2202      	movs	r2, #2
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <NRF24_write_register+0x40>)
 800070a:	f002 fac0 	bl	8002c8e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff ff54 	bl	80005bc <NRF24_csn>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000c4 	.word	0x200000c4

08000720 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff43 	bl	80005bc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	b2db      	uxtb	r3, r3
 800073e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000740:	f107 010c 	add.w	r1, r7, #12
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	2201      	movs	r2, #1
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <NRF24_write_registerN+0x4c>)
 800074a:	f002 faa0 	bl	8002c8e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	b29a      	uxth	r2, r3
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	6839      	ldr	r1, [r7, #0]
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <NRF24_write_registerN+0x4c>)
 8000758:	f002 fa99 	bl	8002c8e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ff2d 	bl	80005bc <NRF24_csn>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000c4 	.word	0x200000c4

08000770 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff1d 	bl	80005bc <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000782:	23a0      	movs	r3, #160	; 0xa0
 8000784:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000786:	f107 010f 	add.w	r1, r7, #15
 800078a:	2364      	movs	r3, #100	; 0x64
 800078c:	2201      	movs	r2, #1
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <NRF24_write_payload+0x40>)
 8000790:	f002 fa7d 	bl	8002c8e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	b29a      	uxth	r2, r3
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <NRF24_write_payload+0x40>)
 800079e:	f002 fa76 	bl	8002c8e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff ff0a 	bl	80005bc <NRF24_csn>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000c4 	.word	0x200000c4

080007b4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80007b8:	21ff      	movs	r1, #255	; 0xff
 80007ba:	20e1      	movs	r0, #225	; 0xe1
 80007bc:	f7ff ff8e 	bl	80006dc <NRF24_write_register>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80007c8:	21ff      	movs	r1, #255	; 0xff
 80007ca:	20e2      	movs	r0, #226	; 0xe2
 80007cc:	f7ff ff86 	bl	80006dc <NRF24_write_register>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff ff2e 	bl	800063c <NRF24_read_register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80007e4:	79fb      	ldrb	r3, [r7, #7]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80007f0:	b082      	sub	sp, #8
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
 8000800:	4613      	mov	r3, r2
 8000802:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000804:	4b66      	ldr	r3, [pc, #408]	; (80009a0 <NRF24_begin+0x1b0>)
 8000806:	4618      	mov	r0, r3
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	2258      	movs	r2, #88	; 0x58
 800080e:	4619      	mov	r1, r3
 8000810:	f003 fa9c 	bl	8003d4c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000814:	4a63      	ldr	r2, [pc, #396]	; (80009a4 <NRF24_begin+0x1b4>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800081a:	4a63      	ldr	r2, [pc, #396]	; (80009a8 <NRF24_begin+0x1b8>)
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000820:	4a62      	ldr	r2, [pc, #392]	; (80009ac <NRF24_begin+0x1bc>)
 8000822:	883b      	ldrh	r3, [r7, #0]
 8000824:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff fec8 	bl	80005bc <NRF24_csn>
	NRF24_ce(0);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fee5 	bl	80005fc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000832:	2005      	movs	r0, #5
 8000834:	f001 fa9a 	bl	8001d6c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000838:	2108      	movs	r1, #8
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ff4e 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000840:	213f      	movs	r1, #63	; 0x3f
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff4a 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff ff46 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000850:	2103      	movs	r1, #3
 8000852:	2003      	movs	r0, #3
 8000854:	f7ff ff42 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000858:	2103      	movs	r1, #3
 800085a:	2004      	movs	r0, #4
 800085c:	f7ff ff3e 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000860:	2102      	movs	r1, #2
 8000862:	2005      	movs	r0, #5
 8000864:	f7ff ff3a 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000868:	210f      	movs	r1, #15
 800086a:	2006      	movs	r0, #6
 800086c:	f7ff ff36 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000870:	210e      	movs	r1, #14
 8000872:	2007      	movs	r0, #7
 8000874:	f7ff ff32 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000878:	2100      	movs	r1, #0
 800087a:	2008      	movs	r0, #8
 800087c:	f7ff ff2e 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000880:	2100      	movs	r1, #0
 8000882:	2009      	movs	r0, #9
 8000884:	f7ff ff2a 	bl	80006dc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000888:	23e7      	movs	r3, #231	; 0xe7
 800088a:	733b      	strb	r3, [r7, #12]
 800088c:	23e7      	movs	r3, #231	; 0xe7
 800088e:	72fb      	strb	r3, [r7, #11]
 8000890:	23e7      	movs	r3, #231	; 0xe7
 8000892:	72bb      	strb	r3, [r7, #10]
 8000894:	23e7      	movs	r3, #231	; 0xe7
 8000896:	727b      	strb	r3, [r7, #9]
 8000898:	23e7      	movs	r3, #231	; 0xe7
 800089a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2205      	movs	r2, #5
 80008a2:	4619      	mov	r1, r3
 80008a4:	200a      	movs	r0, #10
 80008a6:	f7ff ff3b 	bl	8000720 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80008aa:	23c2      	movs	r3, #194	; 0xc2
 80008ac:	733b      	strb	r3, [r7, #12]
 80008ae:	23c2      	movs	r3, #194	; 0xc2
 80008b0:	72fb      	strb	r3, [r7, #11]
 80008b2:	23c2      	movs	r3, #194	; 0xc2
 80008b4:	72bb      	strb	r3, [r7, #10]
 80008b6:	23c2      	movs	r3, #194	; 0xc2
 80008b8:	727b      	strb	r3, [r7, #9]
 80008ba:	23c2      	movs	r3, #194	; 0xc2
 80008bc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2205      	movs	r2, #5
 80008c4:	4619      	mov	r1, r3
 80008c6:	200b      	movs	r0, #11
 80008c8:	f7ff ff2a 	bl	8000720 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008cc:	21c3      	movs	r1, #195	; 0xc3
 80008ce:	200c      	movs	r0, #12
 80008d0:	f7ff ff04 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008d4:	21c4      	movs	r1, #196	; 0xc4
 80008d6:	200d      	movs	r0, #13
 80008d8:	f7ff ff00 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008dc:	21c5      	movs	r1, #197	; 0xc5
 80008de:	200e      	movs	r0, #14
 80008e0:	f7ff fefc 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008e4:	21c6      	movs	r1, #198	; 0xc6
 80008e6:	200f      	movs	r0, #15
 80008e8:	f7ff fef8 	bl	80006dc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80008ec:	23e7      	movs	r3, #231	; 0xe7
 80008ee:	733b      	strb	r3, [r7, #12]
 80008f0:	23e7      	movs	r3, #231	; 0xe7
 80008f2:	72fb      	strb	r3, [r7, #11]
 80008f4:	23e7      	movs	r3, #231	; 0xe7
 80008f6:	72bb      	strb	r3, [r7, #10]
 80008f8:	23e7      	movs	r3, #231	; 0xe7
 80008fa:	727b      	strb	r3, [r7, #9]
 80008fc:	23e7      	movs	r3, #231	; 0xe7
 80008fe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2205      	movs	r2, #5
 8000906:	4619      	mov	r1, r3
 8000908:	2010      	movs	r0, #16
 800090a:	f7ff ff09 	bl	8000720 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800090e:	2100      	movs	r1, #0
 8000910:	2011      	movs	r0, #17
 8000912:	f7ff fee3 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000916:	2100      	movs	r1, #0
 8000918:	2012      	movs	r0, #18
 800091a:	f7ff fedf 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800091e:	2100      	movs	r1, #0
 8000920:	2013      	movs	r0, #19
 8000922:	f7ff fedb 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000926:	2100      	movs	r1, #0
 8000928:	2014      	movs	r0, #20
 800092a:	f7ff fed7 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800092e:	2100      	movs	r1, #0
 8000930:	2015      	movs	r0, #21
 8000932:	f7ff fed3 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000936:	2100      	movs	r1, #0
 8000938:	2016      	movs	r0, #22
 800093a:	f7ff fecf 	bl	80006dc <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800093e:	f000 fa89 	bl	8000e54 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	201c      	movs	r0, #28
 8000946:	f7ff fec9 	bl	80006dc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800094a:	2100      	movs	r1, #0
 800094c:	201d      	movs	r0, #29
 800094e:	f7ff fec5 	bl	80006dc <NRF24_write_register>
	printRadioSettings();
 8000952:	f000 fa99 	bl	8000e88 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000956:	210f      	movs	r1, #15
 8000958:	200f      	movs	r0, #15
 800095a:	f000 f8ad 	bl	8000ab8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f927 	bl	8000bb2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000964:	2001      	movs	r0, #1
 8000966:	f000 f95d 	bl	8000c24 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800096a:	2002      	movs	r0, #2
 800096c:	f000 f9a0 	bl	8000cb0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000970:	f000 f8f2 	bl	8000b58 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000974:	2020      	movs	r0, #32
 8000976:	f000 f8cf 	bl	8000b18 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 800097a:	f000 fa62 	bl	8000e42 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800097e:	204c      	movs	r0, #76	; 0x4c
 8000980:	f000 f8b5 	bl	8000aee <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000984:	f7ff ff16 	bl	80007b4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000988:	f7ff ff1c 	bl	80007c4 <NRF24_flush_rx>

	NRF24_powerDown();
 800098c:	f000 f9b8 	bl	8000d00 <NRF24_powerDown>

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800099a:	b002      	add	sp, #8
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	200000c4 	.word	0x200000c4
 80009a4:	200000bc 	.word	0x200000bc
 80009a8:	200000c0 	.word	0x200000c0
 80009ac:	200000c2 	.word	0x200000c2

080009b0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fe21 	bl	80005fc <NRF24_ce>
	NRF24_flush_tx();
 80009ba:	f7ff fefb 	bl	80007b4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009be:	f7ff ff01 	bl	80007c4 <NRF24_flush_rx>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80009d4:	f000 fa35 	bl	8000e42 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	4619      	mov	r1, r3
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f9ce 	bl	8000d7e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80009e2:	f001 f9b7 	bl	8001d54 <HAL_GetTick>
 80009e6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009e8:	230a      	movs	r3, #10
 80009ea:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80009ec:	f107 030d 	add.w	r3, r7, #13
 80009f0:	2201      	movs	r2, #1
 80009f2:	4619      	mov	r1, r3
 80009f4:	2008      	movs	r0, #8
 80009f6:	f7ff fe49 	bl	800068c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80009fa:	f7ff feeb 	bl	80007d4 <NRF24_get_status>
 80009fe:	4603      	mov	r3, r0
 8000a00:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d107      	bne.n	8000a1c <NRF24_write+0x54>
 8000a0c:	f001 f9a2 	bl	8001d54 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8e7      	bhi.n	80009ec <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a1c:	f107 010b 	add.w	r1, r7, #11
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <NRF24_write+0x90>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f9d8 	bl	8000ddc <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a2c:	7b3b      	ldrb	r3, [r7, #12]
 8000a2e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <NRF24_write+0x90>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d005      	beq.n	8000a44 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000a38:	f000 f886 	bl	8000b48 <NRF24_getDynamicPayloadSize>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <NRF24_write+0x94>)
 8000a42:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8000a44:	f000 f80c 	bl	8000a60 <NRF24_available>
	NRF24_flush_tx();
 8000a48:	f7ff feb4 	bl	80007b4 <NRF24_flush_tx>
	return retStatus;
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000b4 	.word	0x200000b4
 8000a5c:	200000b5 	.word	0x200000b5

08000a60 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f95a 	bl	8000d1e <NRF24_availablePipe>
 8000a6a:	4603      	mov	r3, r0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	4619      	mov	r1, r3
 8000a80:	200a      	movs	r0, #10
 8000a82:	f7ff fe4d 	bl	8000720 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000a86:	463b      	mov	r3, r7
 8000a88:	2205      	movs	r2, #5
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2010      	movs	r0, #16
 8000a8e:	f7ff fe47 	bl	8000720 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8000a92:	2320      	movs	r3, #32
 8000a94:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <NRF24_openWritingPipe+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	7bfa      	ldrb	r2, [r7, #15]
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	bf28      	it	cs
 8000aa0:	4613      	movcs	r3, r2
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2011      	movs	r0, #17
 8000aa8:	f7ff fe18 	bl	80006dc <NRF24_write_register>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000b6 	.word	0x200000b6

08000ab8 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	b25a      	sxtb	r2, r3
 8000ace:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	2004      	movs	r0, #4
 8000ae2:	f7ff fdfb 	bl	80006dc <NRF24_write_register>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000af8:	237f      	movs	r3, #127	; 0x7f
 8000afa:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000afc:	7bfa      	ldrb	r2, [r7, #15]
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4293      	cmp	r3, r2
 8000b02:	bf28      	it	cs
 8000b04:	4613      	movcs	r3, r2
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	2005      	movs	r0, #5
 8000b0c:	f7ff fde6 	bl	80006dc <NRF24_write_register>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b22:	2320      	movs	r3, #32
 8000b24:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b26:	7bfa      	ldrb	r2, [r7, #15]
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	bf28      	it	cs
 8000b2e:	4613      	movcs	r3, r2
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <NRF24_setPayloadSize+0x2c>)
 8000b34:	701a      	strb	r2, [r3, #0]
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200000b6 	.word	0x200000b6

08000b48 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b4c:	2060      	movs	r0, #96	; 0x60
 8000b4e:	f7ff fd75 	bl	800063c <NRF24_read_register>
 8000b52:	4603      	mov	r3, r0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b5c:	201d      	movs	r0, #29
 8000b5e:	f7ff fd6d 	bl	800063c <NRF24_read_register>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f023 0304 	bic.w	r3, r3, #4
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	201d      	movs	r0, #29
 8000b6e:	f7ff fdb5 	bl	80006dc <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	201c      	movs	r0, #28
 8000b76:	f7ff fdb1 	bl	80006dc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b7a:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <NRF24_disableDynamicPayloads+0x2c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000b7 	.word	0x200000b7

08000b88 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000b98:	213f      	movs	r1, #63	; 0x3f
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fd9e 	bl	80006dc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000ba0:	e003      	b.n	8000baa <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fd99 	bl	80006dc <NRF24_write_register>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bbc:	2006      	movs	r0, #6
 8000bbe:	f7ff fd3d 	bl	800063c <NRF24_read_register>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	f023 0306 	bic.w	r3, r3, #6
 8000bcc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d104      	bne.n	8000bde <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	f043 0306 	orr.w	r3, r3, #6
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e019      	b.n	8000c12 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d104      	bne.n	8000bee <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e011      	b.n	8000c12 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d104      	bne.n	8000bfe <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e009      	b.n	8000c12 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d103      	bne.n	8000c12 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	f043 0306 	orr.w	r3, r3, #6
 8000c10:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	4619      	mov	r1, r3
 8000c16:	2006      	movs	r0, #6
 8000c18:	f7ff fd60 	bl	80006dc <NRF24_write_register>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c32:	2006      	movs	r0, #6
 8000c34:	f7ff fd02 	bl	800063c <NRF24_read_register>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <NRF24_setDataRate+0x88>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c48:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d107      	bne.n	8000c60 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <NRF24_setDataRate+0x88>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	f043 0320 	orr.w	r3, r3, #32
 8000c5c:	73bb      	strb	r3, [r7, #14]
 8000c5e:	e00d      	b.n	8000c7c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d107      	bne.n	8000c76 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <NRF24_setDataRate+0x88>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	73bb      	strb	r3, [r7, #14]
 8000c74:	e002      	b.n	8000c7c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <NRF24_setDataRate+0x88>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	2006      	movs	r0, #6
 8000c82:	f7ff fd2b 	bl	80006dc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000c86:	2006      	movs	r0, #6
 8000c88:	f7ff fcd8 	bl	800063c <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	7bbb      	ldrb	r3, [r7, #14]
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d102      	bne.n	8000c9c <NRF24_setDataRate+0x78>
  {
    result = true;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e002      	b.n	8000ca2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <NRF24_setDataRate+0x88>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000b8 	.word	0x200000b8

08000cb0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fcbe 	bl	800063c <NRF24_read_register>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f023 030c 	bic.w	r3, r3, #12
 8000cc6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00f      	beq.n	8000cee <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d104      	bne.n	8000cde <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e007      	b.n	8000cee <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fcf2 	bl	80006dc <NRF24_write_register>
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fc99 	bl	800063c <NRF24_read_register>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f023 0302 	bic.w	r3, r3, #2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fce1 	bl	80006dc <NRF24_write_register>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d26:	f7ff fd55 	bl	80007d4 <NRF24_get_status>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bf14      	ite	ne
 8000d38:	2301      	movne	r3, #1
 8000d3a:	2300      	moveq	r3, #0
 8000d3c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d017      	beq.n	8000d74 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	085b      	lsrs	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000d5a:	2140      	movs	r1, #64	; 0x40
 8000d5c:	2007      	movs	r0, #7
 8000d5e:	f7ff fcbd 	bl	80006dc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f7ff fcb4 	bl	80006dc <NRF24_write_register>
    }
  }
  return result;
 8000d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fc36 	bl	80005fc <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff fc53 	bl	800063c <NRF24_read_register>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4619      	mov	r1, r3
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fc98 	bl	80006dc <NRF24_write_register>
  NRF24_ce(1);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff fc25 	bl	80005fc <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000db2:	2096      	movs	r0, #150	; 0x96
 8000db4:	f7ff fbe0 	bl	8000578 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fcd7 	bl	8000770 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff fc1a 	bl	80005fc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000dc8:	200f      	movs	r0, #15
 8000dca:	f7ff fbd5 	bl	8000578 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fc14 	bl	80005fc <NRF24_ce>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000de8:	f7ff fcf4 	bl	80007d4 <NRF24_get_status>
 8000dec:	4603      	mov	r3, r0
 8000dee:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000df6:	2170      	movs	r1, #112	; 0x70
 8000df8:	2007      	movs	r0, #7
 8000dfa:	f7ff fc6f 	bl	80006dc <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf14      	ite	ne
 8000e1c:	2301      	movne	r3, #1
 8000e1e:	2300      	moveq	r3, #0
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e46:	2170      	movs	r1, #112	; 0x70
 8000e48:	2007      	movs	r0, #7
 8000e4a:	f7ff fc47 	bl	80006dc <NRF24_write_register>
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fbae 	bl	80005bc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000e60:	2350      	movs	r3, #80	; 0x50
 8000e62:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000e64:	2373      	movs	r3, #115	; 0x73
 8000e66:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000e68:	1d39      	adds	r1, r7, #4
 8000e6a:	2364      	movs	r3, #100	; 0x64
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <NRF24_ACTIVATE_cmd+0x30>)
 8000e70:	f001 ff0d 	bl	8002c8e <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff fba1 	bl	80005bc <NRF24_csn>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000c4 	.word	0x200000c4

08000e88 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	b0a1      	sub	sp, #132	; 0x84
 8000e8c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	49c3      	ldr	r1, [pc, #780]	; (80011a0 <printRadioSettings+0x318>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 ff6f 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f996 	bl	80001d0 <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	f107 0108 	add.w	r1, r7, #8
 8000eac:	230a      	movs	r3, #10
 8000eae:	48bd      	ldr	r0, [pc, #756]	; (80011a4 <printRadioSettings+0x31c>)
 8000eb0:	f002 fc59 	bl	8003766 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fbc1 	bl	800063c <NRF24_read_register>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000ec0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d013      	beq.n	8000ef4 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000ecc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <printRadioSettings+0x5e>
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	49b2      	ldr	r1, [pc, #712]	; (80011a8 <printRadioSettings+0x320>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 ff4a 	bl	8003d78 <siprintf>
 8000ee4:	e00c      	b.n	8000f00 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	49b0      	ldr	r1, [pc, #704]	; (80011ac <printRadioSettings+0x324>)
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 ff43 	bl	8003d78 <siprintf>
 8000ef2:	e005      	b.n	8000f00 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	49ad      	ldr	r1, [pc, #692]	; (80011b0 <printRadioSettings+0x328>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 ff3c 	bl	8003d78 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f963 	bl	80001d0 <strlen>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	f107 0108 	add.w	r1, r7, #8
 8000f12:	230a      	movs	r3, #10
 8000f14:	48a3      	ldr	r0, [pc, #652]	; (80011a4 <printRadioSettings+0x31c>)
 8000f16:	f002 fc26 	bl	8003766 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f7ff fb8e 	bl	800063c <NRF24_read_register>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f2a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bfcc      	ite	gt
 8000f32:	2301      	movgt	r3, #1
 8000f34:	2300      	movle	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f3e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bfcc      	ite	gt
 8000f46:	2301      	movgt	r3, #1
 8000f48:	2300      	movle	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f52:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bfcc      	ite	gt
 8000f5a:	2301      	movgt	r3, #1
 8000f5c:	2300      	movle	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f66:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bfcc      	ite	gt
 8000f6e:	2301      	movgt	r3, #1
 8000f70:	2300      	movle	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f7a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bfcc      	ite	gt
 8000f82:	2301      	movgt	r3, #1
 8000f84:	2300      	movle	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f8e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bfcc      	ite	gt
 8000f96:	2301      	movgt	r3, #1
 8000f98:	2300      	movle	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f107 0008 	add.w	r0, r7, #8
 8000fa0:	9303      	str	r3, [sp, #12]
 8000fa2:	9402      	str	r4, [sp, #8]
 8000fa4:	9101      	str	r1, [sp, #4]
 8000fa6:	9200      	str	r2, [sp, #0]
 8000fa8:	4633      	mov	r3, r6
 8000faa:	462a      	mov	r2, r5
 8000fac:	4981      	ldr	r1, [pc, #516]	; (80011b4 <printRadioSettings+0x32c>)
 8000fae:	f002 fee3 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f90a 	bl	80001d0 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f107 0108 	add.w	r1, r7, #8
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	4877      	ldr	r0, [pc, #476]	; (80011a4 <printRadioSettings+0x31c>)
 8000fc8:	f002 fbcd 	bl	8003766 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f7ff fb35 	bl	800063c <NRF24_read_register>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fdc:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bfcc      	ite	gt
 8000fe4:	2301      	movgt	r3, #1
 8000fe6:	2300      	movle	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ff0:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bfcc      	ite	gt
 8000ff8:	2301      	movgt	r3, #1
 8000ffa:	2300      	movle	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001000:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001004:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001008:	2b00      	cmp	r3, #0
 800100a:	bfcc      	ite	gt
 800100c:	2301      	movgt	r3, #1
 800100e:	2300      	movle	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001014:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001018:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800101c:	2b00      	cmp	r3, #0
 800101e:	bfcc      	ite	gt
 8001020:	2301      	movgt	r3, #1
 8001022:	2300      	movle	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001028:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800102c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001030:	2b00      	cmp	r3, #0
 8001032:	bfcc      	ite	gt
 8001034:	2301      	movgt	r3, #1
 8001036:	2300      	movle	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800103c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001040:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001044:	2b00      	cmp	r3, #0
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f107 0008 	add.w	r0, r7, #8
 8001052:	9303      	str	r3, [sp, #12]
 8001054:	9402      	str	r4, [sp, #8]
 8001056:	9101      	str	r1, [sp, #4]
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	4633      	mov	r3, r6
 800105c:	462a      	mov	r2, r5
 800105e:	4956      	ldr	r1, [pc, #344]	; (80011b8 <printRadioSettings+0x330>)
 8001060:	f002 fe8a 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f8b1 	bl	80001d0 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	f107 0108 	add.w	r1, r7, #8
 8001076:	230a      	movs	r3, #10
 8001078:	484a      	ldr	r0, [pc, #296]	; (80011a4 <printRadioSettings+0x31c>)
 800107a:	f002 fb74 	bl	8003766 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800107e:	2003      	movs	r0, #3
 8001080:	f7ff fadc 	bl	800063c <NRF24_read_register>
 8001084:	4603      	mov	r3, r0
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800108e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001092:	3302      	adds	r3, #2
 8001094:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001098:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4946      	ldr	r1, [pc, #280]	; (80011bc <printRadioSettings+0x334>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fe68 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f88f 	bl	80001d0 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f107 0108 	add.w	r1, r7, #8
 80010ba:	230a      	movs	r3, #10
 80010bc:	4839      	ldr	r0, [pc, #228]	; (80011a4 <printRadioSettings+0x31c>)
 80010be:	f002 fb52 	bl	8003766 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80010c2:	2005      	movs	r0, #5
 80010c4:	f7ff faba 	bl	800063c <NRF24_read_register>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80010ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4939      	ldr	r1, [pc, #228]	; (80011c0 <printRadioSettings+0x338>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fe4b 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f872 	bl	80001d0 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	f107 0108 	add.w	r1, r7, #8
 80010f4:	230a      	movs	r3, #10
 80010f6:	482b      	ldr	r0, [pc, #172]	; (80011a4 <printRadioSettings+0x31c>)
 80010f8:	f002 fb35 	bl	8003766 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80010fc:	2006      	movs	r0, #6
 80010fe:	f7ff fa9d 	bl	800063c <NRF24_read_register>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001108:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <printRadioSettings+0x29a>
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	492a      	ldr	r1, [pc, #168]	; (80011c4 <printRadioSettings+0x33c>)
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fe2c 	bl	8003d78 <siprintf>
 8001120:	e005      	b.n	800112e <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4928      	ldr	r1, [pc, #160]	; (80011c8 <printRadioSettings+0x340>)
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fe25 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f84c 	bl	80001d0 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	f107 0108 	add.w	r1, r7, #8
 8001140:	230a      	movs	r3, #10
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <printRadioSettings+0x31c>)
 8001144:	f002 fb0f 	bl	8003766 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001148:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114c:	f003 0306 	and.w	r3, r3, #6
 8001150:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001154:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001158:	085b      	lsrs	r3, r3, #1
 800115a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800115e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <printRadioSettings+0x2ec>
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4918      	ldr	r1, [pc, #96]	; (80011cc <printRadioSettings+0x344>)
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fe03 	bl	8003d78 <siprintf>
 8001172:	e03b      	b.n	80011ec <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001174:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001178:	2b01      	cmp	r3, #1
 800117a:	d106      	bne.n	800118a <printRadioSettings+0x302>
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	4913      	ldr	r1, [pc, #76]	; (80011d0 <printRadioSettings+0x348>)
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fdf8 	bl	8003d78 <siprintf>
 8001188:	e030      	b.n	80011ec <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800118a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118e:	2b02      	cmp	r3, #2
 8001190:	d122      	bne.n	80011d8 <printRadioSettings+0x350>
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	490f      	ldr	r1, [pc, #60]	; (80011d4 <printRadioSettings+0x34c>)
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fded 	bl	8003d78 <siprintf>
 800119e:	e025      	b.n	80011ec <printRadioSettings+0x364>
 80011a0:	080045d0 	.word	0x080045d0
 80011a4:	2000011c 	.word	0x2000011c
 80011a8:	08004604 	.word	0x08004604
 80011ac:	08004620 	.word	0x08004620
 80011b0:	0800463c 	.word	0x0800463c
 80011b4:	08004650 	.word	0x08004650
 80011b8:	08004694 	.word	0x08004694
 80011bc:	080046e0 	.word	0x080046e0
 80011c0:	080046fc 	.word	0x080046fc
 80011c4:	08004710 	.word	0x08004710
 80011c8:	08004728 	.word	0x08004728
 80011cc:	08004740 	.word	0x08004740
 80011d0:	08004754 	.word	0x08004754
 80011d4:	08004768 	.word	0x08004768
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80011d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d105      	bne.n	80011ec <printRadioSettings+0x364>
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	49d7      	ldr	r1, [pc, #860]	; (8001544 <printRadioSettings+0x6bc>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fdc6 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7fe ffed 	bl	80001d0 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f107 0108 	add.w	r1, r7, #8
 80011fe:	230a      	movs	r3, #10
 8001200:	48d1      	ldr	r0, [pc, #836]	; (8001548 <printRadioSettings+0x6c0>)
 8001202:	f002 fab0 	bl	8003766 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001206:	463b      	mov	r3, r7
 8001208:	2205      	movs	r2, #5
 800120a:	4619      	mov	r1, r3
 800120c:	200a      	movs	r0, #10
 800120e:	f7ff fa3d 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001212:	793b      	ldrb	r3, [r7, #4]
 8001214:	461c      	mov	r4, r3
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	461d      	mov	r5, r3
 800121a:	78bb      	ldrb	r3, [r7, #2]
 800121c:	787a      	ldrb	r2, [r7, #1]
 800121e:	7839      	ldrb	r1, [r7, #0]
 8001220:	f107 0008 	add.w	r0, r7, #8
 8001224:	9102      	str	r1, [sp, #8]
 8001226:	9201      	str	r2, [sp, #4]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	462b      	mov	r3, r5
 800122c:	4622      	mov	r2, r4
 800122e:	49c7      	ldr	r1, [pc, #796]	; (800154c <printRadioSettings+0x6c4>)
 8001230:	f002 fda2 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ffc9 	bl	80001d0 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f107 0108 	add.w	r1, r7, #8
 8001246:	230a      	movs	r3, #10
 8001248:	48bf      	ldr	r0, [pc, #764]	; (8001548 <printRadioSettings+0x6c0>)
 800124a:	f002 fa8c 	bl	8003766 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800124e:	463b      	mov	r3, r7
 8001250:	2205      	movs	r2, #5
 8001252:	4619      	mov	r1, r3
 8001254:	200b      	movs	r0, #11
 8001256:	f7ff fa19 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800125a:	793b      	ldrb	r3, [r7, #4]
 800125c:	461c      	mov	r4, r3
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	461d      	mov	r5, r3
 8001262:	78bb      	ldrb	r3, [r7, #2]
 8001264:	787a      	ldrb	r2, [r7, #1]
 8001266:	7839      	ldrb	r1, [r7, #0]
 8001268:	f107 0008 	add.w	r0, r7, #8
 800126c:	9102      	str	r1, [sp, #8]
 800126e:	9201      	str	r2, [sp, #4]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	462b      	mov	r3, r5
 8001274:	4622      	mov	r2, r4
 8001276:	49b6      	ldr	r1, [pc, #728]	; (8001550 <printRadioSettings+0x6c8>)
 8001278:	f002 fd7e 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4618      	mov	r0, r3
 8001282:	f7fe ffa5 	bl	80001d0 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f107 0108 	add.w	r1, r7, #8
 800128e:	230a      	movs	r3, #10
 8001290:	48ad      	ldr	r0, [pc, #692]	; (8001548 <printRadioSettings+0x6c0>)
 8001292:	f002 fa68 	bl	8003766 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001296:	463b      	mov	r3, r7
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	200c      	movs	r0, #12
 800129e:	f7ff f9f5 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012a2:	783b      	ldrb	r3, [r7, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	49aa      	ldr	r1, [pc, #680]	; (8001554 <printRadioSettings+0x6cc>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fd63 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7fe ff8a 	bl	80001d0 <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f107 0108 	add.w	r1, r7, #8
 80012c4:	230a      	movs	r3, #10
 80012c6:	48a0      	ldr	r0, [pc, #640]	; (8001548 <printRadioSettings+0x6c0>)
 80012c8:	f002 fa4d 	bl	8003766 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80012cc:	463b      	mov	r3, r7
 80012ce:	2201      	movs	r2, #1
 80012d0:	4619      	mov	r1, r3
 80012d2:	200d      	movs	r0, #13
 80012d4:	f7ff f9da 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012d8:	783b      	ldrb	r3, [r7, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	499d      	ldr	r1, [pc, #628]	; (8001558 <printRadioSettings+0x6d0>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fd48 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7fe ff6f 	bl	80001d0 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	f107 0108 	add.w	r1, r7, #8
 80012fa:	230a      	movs	r3, #10
 80012fc:	4892      	ldr	r0, [pc, #584]	; (8001548 <printRadioSettings+0x6c0>)
 80012fe:	f002 fa32 	bl	8003766 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001302:	463b      	mov	r3, r7
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	200e      	movs	r0, #14
 800130a:	f7ff f9bf 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800130e:	783b      	ldrb	r3, [r7, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4991      	ldr	r1, [pc, #580]	; (800155c <printRadioSettings+0x6d4>)
 8001318:	4618      	mov	r0, r3
 800131a:	f002 fd2d 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff54 	bl	80001d0 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	f107 0108 	add.w	r1, r7, #8
 8001330:	230a      	movs	r3, #10
 8001332:	4885      	ldr	r0, [pc, #532]	; (8001548 <printRadioSettings+0x6c0>)
 8001334:	f002 fa17 	bl	8003766 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001338:	463b      	mov	r3, r7
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	200f      	movs	r0, #15
 8001340:	f7ff f9a4 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001344:	783b      	ldrb	r3, [r7, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4984      	ldr	r1, [pc, #528]	; (8001560 <printRadioSettings+0x6d8>)
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fd12 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff39 	bl	80001d0 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f107 0108 	add.w	r1, r7, #8
 8001366:	230a      	movs	r3, #10
 8001368:	4877      	ldr	r0, [pc, #476]	; (8001548 <printRadioSettings+0x6c0>)
 800136a:	f002 f9fc 	bl	8003766 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800136e:	463b      	mov	r3, r7
 8001370:	2205      	movs	r2, #5
 8001372:	4619      	mov	r1, r3
 8001374:	2010      	movs	r0, #16
 8001376:	f7ff f989 	bl	800068c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	461c      	mov	r4, r3
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	461d      	mov	r5, r3
 8001382:	78bb      	ldrb	r3, [r7, #2]
 8001384:	787a      	ldrb	r2, [r7, #1]
 8001386:	7839      	ldrb	r1, [r7, #0]
 8001388:	f107 0008 	add.w	r0, r7, #8
 800138c:	9102      	str	r1, [sp, #8]
 800138e:	9201      	str	r2, [sp, #4]
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	462b      	mov	r3, r5
 8001394:	4622      	mov	r2, r4
 8001396:	4973      	ldr	r1, [pc, #460]	; (8001564 <printRadioSettings+0x6dc>)
 8001398:	f002 fcee 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff15 	bl	80001d0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	f107 0108 	add.w	r1, r7, #8
 80013ae:	230a      	movs	r3, #10
 80013b0:	4865      	ldr	r0, [pc, #404]	; (8001548 <printRadioSettings+0x6c0>)
 80013b2:	f002 f9d8 	bl	8003766 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80013b6:	2011      	movs	r0, #17
 80013b8:	f7ff f940 	bl	800063c <NRF24_read_register>
 80013bc:	4603      	mov	r3, r0
 80013be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80013c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4966      	ldr	r1, [pc, #408]	; (8001568 <printRadioSettings+0x6e0>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fcd1 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe fef8 	bl	80001d0 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f107 0108 	add.w	r1, r7, #8
 80013e8:	230a      	movs	r3, #10
 80013ea:	4857      	ldr	r0, [pc, #348]	; (8001548 <printRadioSettings+0x6c0>)
 80013ec:	f002 f9bb 	bl	8003766 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80013f0:	2012      	movs	r0, #18
 80013f2:	f7ff f923 	bl	800063c <NRF24_read_register>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80013fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001400:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4958      	ldr	r1, [pc, #352]	; (800156c <printRadioSettings+0x6e4>)
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fcb4 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe fedb 	bl	80001d0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0108 	add.w	r1, r7, #8
 8001422:	230a      	movs	r3, #10
 8001424:	4848      	ldr	r0, [pc, #288]	; (8001548 <printRadioSettings+0x6c0>)
 8001426:	f002 f99e 	bl	8003766 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 800142a:	2013      	movs	r0, #19
 800142c:	f7ff f906 	bl	800063c <NRF24_read_register>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001436:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800143a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	494b      	ldr	r1, [pc, #300]	; (8001570 <printRadioSettings+0x6e8>)
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fc97 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe febe 	bl	80001d0 <strlen>
 8001454:	4603      	mov	r3, r0
 8001456:	b29a      	uxth	r2, r3
 8001458:	f107 0108 	add.w	r1, r7, #8
 800145c:	230a      	movs	r3, #10
 800145e:	483a      	ldr	r0, [pc, #232]	; (8001548 <printRadioSettings+0x6c0>)
 8001460:	f002 f981 	bl	8003766 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001464:	2014      	movs	r0, #20
 8001466:	f7ff f8e9 	bl	800063c <NRF24_read_register>
 800146a:	4603      	mov	r3, r0
 800146c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001470:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	493d      	ldr	r1, [pc, #244]	; (8001574 <printRadioSettings+0x6ec>)
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fc7a 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe fea1 	bl	80001d0 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	f107 0108 	add.w	r1, r7, #8
 8001496:	230a      	movs	r3, #10
 8001498:	482b      	ldr	r0, [pc, #172]	; (8001548 <printRadioSettings+0x6c0>)
 800149a:	f002 f964 	bl	8003766 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 800149e:	2015      	movs	r0, #21
 80014a0:	f7ff f8cc 	bl	800063c <NRF24_read_register>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	4930      	ldr	r1, [pc, #192]	; (8001578 <printRadioSettings+0x6f0>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fc5d 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe84 	bl	80001d0 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	230a      	movs	r3, #10
 80014d2:	481d      	ldr	r0, [pc, #116]	; (8001548 <printRadioSettings+0x6c0>)
 80014d4:	f002 f947 	bl	8003766 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80014d8:	2016      	movs	r0, #22
 80014da:	f7ff f8af 	bl	800063c <NRF24_read_register>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4922      	ldr	r1, [pc, #136]	; (800157c <printRadioSettings+0x6f4>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fc40 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe67 	bl	80001d0 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	f107 0108 	add.w	r1, r7, #8
 800150a:	230a      	movs	r3, #10
 800150c:	480e      	ldr	r0, [pc, #56]	; (8001548 <printRadioSettings+0x6c0>)
 800150e:	f002 f92a 	bl	8003766 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001512:	201c      	movs	r0, #28
 8001514:	f7ff f892 	bl	800063c <NRF24_read_register>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800151e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001522:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001526:	2b00      	cmp	r3, #0
 8001528:	bfcc      	ite	gt
 800152a:	2301      	movgt	r3, #1
 800152c:	2300      	movle	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001532:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001536:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800153a:	2b00      	cmp	r3, #0
 800153c:	bfcc      	ite	gt
 800153e:	2301      	movgt	r3, #1
 8001540:	2300      	movle	r3, #0
 8001542:	e01d      	b.n	8001580 <printRadioSettings+0x6f8>
 8001544:	0800477c 	.word	0x0800477c
 8001548:	2000011c 	.word	0x2000011c
 800154c:	08004790 	.word	0x08004790
 8001550:	080047c0 	.word	0x080047c0
 8001554:	080047f0 	.word	0x080047f0
 8001558:	08004818 	.word	0x08004818
 800155c:	08004840 	.word	0x08004840
 8001560:	08004868 	.word	0x08004868
 8001564:	08004890 	.word	0x08004890
 8001568:	080048bc 	.word	0x080048bc
 800156c:	080048d8 	.word	0x080048d8
 8001570:	080048f4 	.word	0x080048f4
 8001574:	08004910 	.word	0x08004910
 8001578:	0800492c 	.word	0x0800492c
 800157c:	08004948 	.word	0x08004948
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001584:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001588:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800158c:	2b00      	cmp	r3, #0
 800158e:	bfcc      	ite	gt
 8001590:	2301      	movgt	r3, #1
 8001592:	2300      	movle	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001598:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800159c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bfcc      	ite	gt
 80015a4:	2301      	movgt	r3, #1
 80015a6:	2300      	movle	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015b0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bfcc      	ite	gt
 80015b8:	2301      	movgt	r3, #1
 80015ba:	2300      	movle	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015c4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bfcc      	ite	gt
 80015cc:	2301      	movgt	r3, #1
 80015ce:	2300      	movle	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f107 0008 	add.w	r0, r7, #8
 80015d6:	9303      	str	r3, [sp, #12]
 80015d8:	9402      	str	r4, [sp, #8]
 80015da:	9101      	str	r1, [sp, #4]
 80015dc:	9200      	str	r2, [sp, #0]
 80015de:	4633      	mov	r3, r6
 80015e0:	462a      	mov	r2, r5
 80015e2:	4936      	ldr	r1, [pc, #216]	; (80016bc <printRadioSettings+0x834>)
 80015e4:	f002 fbc8 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fdef 	bl	80001d0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4830      	ldr	r0, [pc, #192]	; (80016c0 <printRadioSettings+0x838>)
 80015fe:	f002 f8b2 	bl	8003766 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001602:	201d      	movs	r0, #29
 8001604:	f7ff f81a 	bl	800063c <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <printRadioSettings+0x7a0>
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4929      	ldr	r1, [pc, #164]	; (80016c4 <printRadioSettings+0x83c>)
 8001620:	4618      	mov	r0, r3
 8001622:	f002 fba9 	bl	8003d78 <siprintf>
 8001626:	e005      	b.n	8001634 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4926      	ldr	r1, [pc, #152]	; (80016c8 <printRadioSettings+0x840>)
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fba2 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fdc9 	bl	80001d0 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	f107 0108 	add.w	r1, r7, #8
 8001646:	230a      	movs	r3, #10
 8001648:	481d      	ldr	r0, [pc, #116]	; (80016c0 <printRadioSettings+0x838>)
 800164a:	f002 f88c 	bl	8003766 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800164e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <printRadioSettings+0x7e0>
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	491b      	ldr	r1, [pc, #108]	; (80016cc <printRadioSettings+0x844>)
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fb89 	bl	8003d78 <siprintf>
 8001666:	e005      	b.n	8001674 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4918      	ldr	r1, [pc, #96]	; (80016d0 <printRadioSettings+0x848>)
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fb82 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fda9 	bl	80001d0 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	f107 0108 	add.w	r1, r7, #8
 8001686:	230a      	movs	r3, #10
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <printRadioSettings+0x838>)
 800168a:	f002 f86c 	bl	8003766 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	4910      	ldr	r1, [pc, #64]	; (80016d4 <printRadioSettings+0x84c>)
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fb6f 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fd96 	bl	80001d0 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	f107 0108 	add.w	r1, r7, #8
 80016ac:	230a      	movs	r3, #10
 80016ae:	4804      	ldr	r0, [pc, #16]	; (80016c0 <printRadioSettings+0x838>)
 80016b0:	f002 f859 	bl	8003766 <HAL_UART_Transmit>
}
 80016b4:	bf00      	nop
 80016b6:	3774      	adds	r7, #116	; 0x74
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016bc:	08004964 	.word	0x08004964
 80016c0:	2000011c 	.word	0x2000011c
 80016c4:	080049b0 	.word	0x080049b0
 80016c8:	080049c8 	.word	0x080049c8
 80016cc:	080049e0 	.word	0x080049e0
 80016d0:	080049fc 	.word	0x080049fc
 80016d4:	080045d0 	.word	0x080045d0

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b097      	sub	sp, #92	; 0x5c
 80016dc:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016de:	f000 fad3 	bl	8001c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e2:	f000 f847 	bl	8001774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e6:	f000 f90f 	bl	8001908 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016ea:	f000 f8ad 	bl	8001848 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016ee:	f000 f8e1 	bl	80018b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /***********NRF Ayarlari****************/
   NRF24_begin(GPIOA, CSN_Pin, CE_Pin, hspi1);
 80016f2:	4c1b      	ldr	r4, [pc, #108]	; (8001760 <main+0x88>)
 80016f4:	4668      	mov	r0, sp
 80016f6:	1d23      	adds	r3, r4, #4
 80016f8:	2254      	movs	r2, #84	; 0x54
 80016fa:	4619      	mov	r1, r3
 80016fc:	f002 fb26 	bl	8003d4c <memcpy>
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	2210      	movs	r2, #16
 8001704:	2108      	movs	r1, #8
 8001706:	4817      	ldr	r0, [pc, #92]	; (8001764 <main+0x8c>)
 8001708:	f7ff f872 	bl	80007f0 <NRF24_begin>
   NRF24_stopListening();
 800170c:	f7ff f950 	bl	80009b0 <NRF24_stopListening>
   NRF24_openWritingPipe(TxpipeAddrs);
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <main+0x90>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f9a9 	bl	8000a70 <NRF24_openWritingPipe>
   NRF24_setAutoAck(false);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fa32 	bl	8000b88 <NRF24_setAutoAck>
   NRF24_setChannel(34);
 8001724:	2022      	movs	r0, #34	; 0x22
 8001726:	f7ff f9e2 	bl	8000aee <NRF24_setChannel>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (NRF24_write(myTxData, 32))
 800172a:	2120      	movs	r1, #32
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <main+0x94>)
 800172e:	f7ff f94b 	bl	80009c8 <NRF24_write>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <main+0x72>
		{
			HAL_GPIO_WritePin(led_0_GPIO_Port, led_0_Pin, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2110      	movs	r1, #16
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <main+0x98>)
 800173e:	f000 fdbb 	bl	80022b8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001746:	f000 fb11 	bl	8001d6c <HAL_Delay>
		}
		HAL_GPIO_WritePin(led_0_GPIO_Port, led_0_Pin, 1);
 800174a:	2201      	movs	r2, #1
 800174c:	2110      	movs	r1, #16
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <main+0x98>)
 8001750:	f000 fdb2 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001758:	f000 fb08 	bl	8001d6c <HAL_Delay>
		if (NRF24_write(myTxData, 32))
 800175c:	e7e5      	b.n	800172a <main+0x52>
 800175e:	bf00      	nop
 8001760:	200001b0 	.word	0x200001b0
 8001764:	40020000 	.word	0x40020000
 8001768:	20000000 	.word	0x20000000
 800176c:	20000008 	.word	0x20000008
 8001770:	40020800 	.word	0x40020800

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b094      	sub	sp, #80	; 0x50
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	2230      	movs	r2, #48	; 0x30
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f002 faf0 	bl	8003d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <SystemClock_Config+0xcc>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	4a27      	ldr	r2, [pc, #156]	; (8001840 <SystemClock_Config+0xcc>)
 80017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6413      	str	r3, [r2, #64]	; 0x40
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <SystemClock_Config+0xcc>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <SystemClock_Config+0xd0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a21      	ldr	r2, [pc, #132]	; (8001844 <SystemClock_Config+0xd0>)
 80017be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <SystemClock_Config+0xd0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017e4:	2319      	movs	r3, #25
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017e8:	2390      	movs	r3, #144	; 0x90
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017f0:	2304      	movs	r3, #4
 80017f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fd77 	bl	80022ec <HAL_RCC_OscConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001804:	f000 f8e6 	bl	80019d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001808:	230f      	movs	r3, #15
 800180a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180c:	2302      	movs	r3, #2
 800180e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800181a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2102      	movs	r1, #2
 8001826:	4618      	mov	r0, r3
 8001828:	f000 ffd8 	bl	80027dc <HAL_RCC_ClockConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001832:	f000 f8cf 	bl	80019d4 <Error_Handler>
  }
}
 8001836:	bf00      	nop
 8001838:	3750      	adds	r7, #80	; 0x50
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000

08001848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_SPI1_Init+0x64>)
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <MX_SPI1_Init+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI1_Init+0x64>)
 8001854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI1_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_SPI1_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI1_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI1_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI1_Init+0x64>)
 8001874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI1_Init+0x64>)
 800187c:	2220      	movs	r2, #32
 800187e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_SPI1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI1_Init+0x64>)
 8001894:	220a      	movs	r2, #10
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_SPI1_Init+0x64>)
 800189a:	f001 f96f 	bl	8002b7c <HAL_SPI_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018a4:	f000 f896 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200001b0 	.word	0x200001b0
 80018b0:	40013000 	.word	0x40013000

080018b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <MX_USART1_UART_Init+0x50>)
 80018bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_USART1_UART_Init+0x4c>)
 80018ec:	f001 feee 	bl	80036cc <HAL_UART_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018f6:	f000 f86d 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000016c 	.word	0x2000016c
 8001904:	40011000 	.word	0x40011000

08001908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <MX_GPIO_Init+0xc0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <MX_GPIO_Init+0xc0>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <MX_GPIO_Init+0xc0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <MX_GPIO_Init+0xc0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <MX_GPIO_Init+0xc0>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <MX_GPIO_Init+0xc0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_GPIO_Init+0xc0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <MX_GPIO_Init+0xc0>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_GPIO_Init+0xc0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	2118      	movs	r1, #24
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <MX_GPIO_Init+0xc4>)
 8001978:	f000 fc9e 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_0_GPIO_Port, led_0_Pin, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2110      	movs	r1, #16
 8001980:	4813      	ldr	r0, [pc, #76]	; (80019d0 <MX_GPIO_Init+0xc8>)
 8001982:	f000 fc99 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001986:	2318      	movs	r3, #24
 8001988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4619      	mov	r1, r3
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <MX_GPIO_Init+0xc4>)
 800199e:	f000 faef 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_0_Pin */
  GPIO_InitStruct.Pin = led_0_Pin;
 80019a2:	2310      	movs	r3, #16
 80019a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_0_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_GPIO_Init+0xc8>)
 80019ba:	f000 fae1 	bl	8001f80 <HAL_GPIO_Init>

}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020800 	.word	0x40020800

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_SPI_MspInit+0x84>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12b      	bne.n	8001aaa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_SPI_MspInit+0x88>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_SPI_MspInit+0x88>)
 8001a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_SPI_MspInit+0x88>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_SPI_MspInit+0x88>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_SPI_MspInit+0x88>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_SPI_MspInit+0x88>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a8a:	23e0      	movs	r3, #224	; 0xe0
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <HAL_SPI_MspInit+0x8c>)
 8001aa6:	f000 fa6b 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40013000 	.word	0x40013000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_UART_MspInit+0x84>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12c      	bne.n	8001b3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <HAL_UART_MspInit+0x8c>)
 8001b38:	f000 fa22 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b3c:	bf00      	nop
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <NMI_Handler+0x4>

08001b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler+0x4>

08001b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9c:	f000 f8c6 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <_sbrk+0x5c>)
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <_sbrk+0x60>)
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <_sbrk+0x64>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <_sbrk+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d207      	bcs.n	8001be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd4:	f002 f890 	bl	8003cf8 <__errno>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	220c      	movs	r2, #12
 8001bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e009      	b.n	8001bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <_sbrk+0x64>)
 8001bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20020000 	.word	0x20020000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	20000160 	.word	0x20000160
 8001c0c:	20000220 	.word	0x20000220

08001c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c3a:	490e      	ldr	r1, [pc, #56]	; (8001c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c50:	4c0b      	ldr	r4, [pc, #44]	; (8001c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c5e:	f7ff ffd7 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c62:	f002 f84f 	bl	8003d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c66:	f7ff fd37 	bl	80016d8 <main>
  bx  lr    
 8001c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c74:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001c78:	08004b70 	.word	0x08004b70
  ldr r2, =_sbss
 8001c7c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001c80:	2000021c 	.word	0x2000021c

08001c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c84:	e7fe      	b.n	8001c84 <ADC_IRQHandler>
	...

08001c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_Init+0x40>)
 8001c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <HAL_Init+0x40>)
 8001c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_Init+0x40>)
 8001caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 f931 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb6:	200f      	movs	r0, #15
 8001cb8:	f000 f808 	bl	8001ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cbc:	f7ff fe90 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x54>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x58>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f93b 	bl	8001f66 <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f000 f911 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <HAL_InitTick+0x5c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000028 	.word	0x20000028
 8001d24:	20000030 	.word	0x20000030
 8001d28:	2000002c 	.word	0x2000002c

08001d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x20>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_IncTick+0x24>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000030 	.word	0x20000030
 8001d50:	20000208 	.word	0x20000208

08001d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_GetTick+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000208 	.word	0x20000208

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff ffee 	bl	8001d54 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d005      	beq.n	8001d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_Delay+0x44>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d92:	bf00      	nop
 8001d94:	f7ff ffde 	bl	8001d54 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8f7      	bhi.n	8001d94 <HAL_Delay+0x28>
  {
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000030 	.word	0x20000030

08001db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	60d3      	str	r3, [r2, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <__NVIC_GetPriorityGrouping+0x18>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 0307 	and.w	r3, r3, #7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff47 	bl	8001db4 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff5c 	bl	8001dfc <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffb0 	bl	8001ed4 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e16b      	b.n	8002274 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	f040 815a 	bne.w	800226e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d005      	beq.n	8001fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d130      	bne.n	8002034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b03      	cmp	r3, #3
 800203e:	d017      	beq.n	8002070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d123      	bne.n	80020c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	08da      	lsrs	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	69b9      	ldr	r1, [r7, #24]
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80b4 	beq.w	800226e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_GPIO_Init+0x30c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4a5f      	ldr	r2, [pc, #380]	; (800228c <HAL_GPIO_Init+0x30c>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002114:	6453      	str	r3, [r2, #68]	; 0x44
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_GPIO_Init+0x30c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002122:	4a5b      	ldr	r2, [pc, #364]	; (8002290 <HAL_GPIO_Init+0x310>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_GPIO_Init+0x314>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02b      	beq.n	80021a6 <HAL_GPIO_Init+0x226>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a51      	ldr	r2, [pc, #324]	; (8002298 <HAL_GPIO_Init+0x318>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d025      	beq.n	80021a2 <HAL_GPIO_Init+0x222>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a50      	ldr	r2, [pc, #320]	; (800229c <HAL_GPIO_Init+0x31c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01f      	beq.n	800219e <HAL_GPIO_Init+0x21e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4f      	ldr	r2, [pc, #316]	; (80022a0 <HAL_GPIO_Init+0x320>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d019      	beq.n	800219a <HAL_GPIO_Init+0x21a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_GPIO_Init+0x324>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <HAL_GPIO_Init+0x216>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4d      	ldr	r2, [pc, #308]	; (80022a8 <HAL_GPIO_Init+0x328>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00d      	beq.n	8002192 <HAL_GPIO_Init+0x212>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4c      	ldr	r2, [pc, #304]	; (80022ac <HAL_GPIO_Init+0x32c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <HAL_GPIO_Init+0x20e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4b      	ldr	r2, [pc, #300]	; (80022b0 <HAL_GPIO_Init+0x330>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_GPIO_Init+0x20a>
 8002186:	2307      	movs	r3, #7
 8002188:	e00e      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 800218a:	2308      	movs	r3, #8
 800218c:	e00c      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 800218e:	2306      	movs	r3, #6
 8002190:	e00a      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 8002192:	2305      	movs	r3, #5
 8002194:	e008      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 8002196:	2304      	movs	r3, #4
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 800219a:	2303      	movs	r3, #3
 800219c:	e004      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 800219e:	2302      	movs	r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 80021a6:	2300      	movs	r3, #0
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f002 0203 	and.w	r2, r2, #3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4093      	lsls	r3, r2
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b8:	4935      	ldr	r1, [pc, #212]	; (8002290 <HAL_GPIO_Init+0x310>)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_GPIO_Init+0x334>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ea:	4a32      	ldr	r2, [pc, #200]	; (80022b4 <HAL_GPIO_Init+0x334>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <HAL_GPIO_Init+0x334>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002214:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <HAL_GPIO_Init+0x334>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_GPIO_Init+0x334>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_GPIO_Init+0x334>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_GPIO_Init+0x334>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002268:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <HAL_GPIO_Init+0x334>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	f67f ae90 	bls.w	8001f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40013800 	.word	0x40013800
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40021400 	.word	0x40021400
 80022ac:	40021800 	.word	0x40021800
 80022b0:	40021c00 	.word	0x40021c00
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e264      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d075      	beq.n	80023f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230a:	4ba3      	ldr	r3, [pc, #652]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d00c      	beq.n	8002330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4ba0      	ldr	r3, [pc, #640]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	2b08      	cmp	r3, #8
 8002320:	d112      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b9d      	ldr	r3, [pc, #628]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b99      	ldr	r3, [pc, #612]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05b      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d157      	bne.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e23f      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x74>
 8002352:	4b91      	ldr	r3, [pc, #580]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a90      	ldr	r2, [pc, #576]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x98>
 800236a:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a8a      	ldr	r2, [pc, #552]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a87      	ldr	r2, [pc, #540]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002384:	4b84      	ldr	r3, [pc, #528]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a83      	ldr	r2, [pc, #524]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a80      	ldr	r2, [pc, #512]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fcd6 	bl	8001d54 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fcd2 	bl	8001d54 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e204      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xc0>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fcc2 	bl	8001d54 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fcbe 	bl	8001d54 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1f0      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002402:	4b65      	ldr	r3, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b62      	ldr	r3, [pc, #392]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1c4      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4952      	ldr	r1, [pc, #328]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <HAL_RCC_OscConfig+0x2b0>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff fc77 	bl	8001d54 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246a:	f7ff fc73 	bl	8001d54 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1a5      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b43      	ldr	r3, [pc, #268]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4940      	ldr	r1, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0x2b0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fc56 	bl	8001d54 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fc52 	bl	8001d54 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e184      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d030      	beq.n	8002538 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <HAL_RCC_OscConfig+0x2b4>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7ff fc36 	bl	8001d54 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7ff fc32 	bl	8001d54 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e164      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x200>
 800250a:	e015      	b.n	8002538 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCC_OscConfig+0x2b4>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fc1f 	bl	8001d54 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251a:	f7ff fc1b 	bl	8001d54 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e14d      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a0 	beq.w	8002686 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x2b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d121      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_RCC_OscConfig+0x2b8>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7ff fbe1 	bl	8001d54 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	e011      	b.n	80025ba <HAL_RCC_OscConfig+0x2ce>
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	42470000 	.word	0x42470000
 80025a0:	42470e80 	.word	0x42470e80
 80025a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a8:	f7ff fbd4 	bl	8001d54 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e106      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x4e4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d106      	bne.n	80025dc <HAL_RCC_OscConfig+0x2f0>
 80025ce:	4b81      	ldr	r3, [pc, #516]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a80      	ldr	r2, [pc, #512]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
 80025da:	e01c      	b.n	8002616 <HAL_RCC_OscConfig+0x32a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_OscConfig+0x312>
 80025e4:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a7a      	ldr	r2, [pc, #488]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	e00b      	b.n	8002616 <HAL_RCC_OscConfig+0x32a>
 80025fe:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a74      	ldr	r2, [pc, #464]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a71      	ldr	r2, [pc, #452]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d015      	beq.n	800264a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7ff fb99 	bl	8001d54 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7ff fb95 	bl	8001d54 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0c5      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ee      	beq.n	8002626 <HAL_RCC_OscConfig+0x33a>
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7ff fb83 	bl	8001d54 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff fb7f 	bl	8001d54 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0af      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ee      	bne.n	8002652 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a55      	ldr	r2, [pc, #340]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 809b 	beq.w	80027c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002690:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d05c      	beq.n	8002756 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d141      	bne.n	8002728 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_RCC_OscConfig+0x4ec>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff fb53 	bl	8001d54 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff fb4f 	bl	8001d54 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e081      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	019b      	lsls	r3, r3, #6
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	4937      	ldr	r1, [pc, #220]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCC_OscConfig+0x4ec>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fb28 	bl	8001d54 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002708:	f7ff fb24 	bl	8001d54 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e056      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x41c>
 8002726:	e04e      	b.n	80027c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_OscConfig+0x4ec>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7ff fb11 	bl	8001d54 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002736:	f7ff fb0d 	bl	8001d54 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e03f      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x44a>
 8002754:	e037      	b.n	80027c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e032      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <HAL_RCC_OscConfig+0x4e8>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d028      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d121      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d11a      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002798:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800279a:	4293      	cmp	r3, r2
 800279c:	d111      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	3b01      	subs	r3, #1
 80027ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40007000 	.word	0x40007000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	42470060 	.word	0x42470060

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0cc      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d90c      	bls.n	8002818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a58      	ldr	r2, [pc, #352]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800283a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d044      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d003      	beq.n	800289a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e067      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4934      	ldr	r1, [pc, #208]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7ff fa42 	bl	8001d54 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7ff fa3e 	bl	8001d54 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e04f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d20c      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f9a2 	bl	8001ccc <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00
 8002998:	40023800 	.word	0x40023800
 800299c:	08004b14 	.word	0x08004b14
 80029a0:	20000028 	.word	0x20000028
 80029a4:	2000002c 	.word	0x2000002c

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029ae:	2100      	movs	r1, #0
 80029b0:	6079      	str	r1, [r7, #4]
 80029b2:	2100      	movs	r1, #0
 80029b4:	60f9      	str	r1, [r7, #12]
 80029b6:	2100      	movs	r1, #0
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029ba:	2100      	movs	r1, #0
 80029bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029be:	4952      	ldr	r1, [pc, #328]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80029c0:	6889      	ldr	r1, [r1, #8]
 80029c2:	f001 010c 	and.w	r1, r1, #12
 80029c6:	2908      	cmp	r1, #8
 80029c8:	d00d      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80029ca:	2908      	cmp	r1, #8
 80029cc:	f200 8094 	bhi.w	8002af8 <HAL_RCC_GetSysClockFreq+0x150>
 80029d0:	2900      	cmp	r1, #0
 80029d2:	d002      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x32>
 80029d4:	2904      	cmp	r1, #4
 80029d6:	d003      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x38>
 80029d8:	e08e      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029da:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x164>)
 80029dc:	60bb      	str	r3, [r7, #8]
       break;
 80029de:	e08e      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x168>)
 80029e2:	60bb      	str	r3, [r7, #8]
      break;
 80029e4:	e08b      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e6:	4948      	ldr	r1, [pc, #288]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80029e8:	6849      	ldr	r1, [r1, #4]
 80029ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80029ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f0:	4945      	ldr	r1, [pc, #276]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f2:	6849      	ldr	r1, [r1, #4]
 80029f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029f8:	2900      	cmp	r1, #0
 80029fa:	d024      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fc:	4942      	ldr	r1, [pc, #264]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80029fe:	6849      	ldr	r1, [r1, #4]
 8002a00:	0989      	lsrs	r1, r1, #6
 8002a02:	4608      	mov	r0, r1
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a0c:	f04f 0500 	mov.w	r5, #0
 8002a10:	ea00 0204 	and.w	r2, r0, r4
 8002a14:	ea01 0305 	and.w	r3, r1, r5
 8002a18:	493d      	ldr	r1, [pc, #244]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a1a:	fb01 f003 	mul.w	r0, r1, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	fb01 f102 	mul.w	r1, r1, r2
 8002a24:	1844      	adds	r4, r0, r1
 8002a26:	493a      	ldr	r1, [pc, #232]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a28:	fba2 0101 	umull	r0, r1, r2, r1
 8002a2c:	1863      	adds	r3, r4, r1
 8002a2e:	4619      	mov	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f7fd fc22 	bl	8000280 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e04a      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	ea02 0400 	and.w	r4, r2, r0
 8002a5e:	ea03 0501 	and.w	r5, r3, r1
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	014b      	lsls	r3, r1, #5
 8002a70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a74:	0142      	lsls	r2, r0, #5
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	1b00      	subs	r0, r0, r4
 8002a7c:	eb61 0105 	sbc.w	r1, r1, r5
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	018b      	lsls	r3, r1, #6
 8002a8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a8e:	0182      	lsls	r2, r0, #6
 8002a90:	1a12      	subs	r2, r2, r0
 8002a92:	eb63 0301 	sbc.w	r3, r3, r1
 8002a96:	f04f 0000 	mov.w	r0, #0
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	00d9      	lsls	r1, r3, #3
 8002aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aa4:	00d0      	lsls	r0, r2, #3
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	1912      	adds	r2, r2, r4
 8002aac:	eb45 0303 	adc.w	r3, r5, r3
 8002ab0:	f04f 0000 	mov.w	r0, #0
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	0299      	lsls	r1, r3, #10
 8002aba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002abe:	0290      	lsls	r0, r2, #10
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	f7fd fbd6 	bl	8000280 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	60bb      	str	r3, [r7, #8]
      break;
 8002af6:	e002      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x164>)
 8002afa:	60bb      	str	r3, [r7, #8]
      break;
 8002afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afe:	68bb      	ldr	r3, [r7, #8]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bdb0      	pop	{r4, r5, r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	017d7840 	.word	0x017d7840

08002b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000028 	.word	0x20000028

08002b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b30:	f7ff fff0 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0a9b      	lsrs	r3, r3, #10
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08004b24 	.word	0x08004b24

08002b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b58:	f7ff ffdc 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	0b5b      	lsrs	r3, r3, #13
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4903      	ldr	r1, [pc, #12]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	08004b24 	.word	0x08004b24

08002b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07b      	b.n	8002c86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d108      	bne.n	8002ba8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b9e:	d009      	beq.n	8002bb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
 8002ba6:	e005      	b.n	8002bb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe ff2e 	bl	8001a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	ea42 0103 	orr.w	r1, r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	f003 0104 	and.w	r1, r3, #4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f003 0210 	and.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b088      	sub	sp, #32
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_SPI_Transmit+0x22>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e126      	b.n	8002efe <HAL_SPI_Transmit+0x270>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb8:	f7ff f84c 	bl	8001d54 <HAL_GetTick>
 8002cbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cd2:	e10b      	b.n	8002eec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SPI_Transmit+0x52>
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ce4:	e102      	b.n	8002eec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2c:	d10f      	bne.n	8002d4e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d007      	beq.n	8002d6c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d74:	d14b      	bne.n	8002e0e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_SPI_Transmit+0xf6>
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d13e      	bne.n	8002e02 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	881a      	ldrh	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	1c9a      	adds	r2, r3, #2
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002da8:	e02b      	b.n	8002e02 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d112      	bne.n	8002dde <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	881a      	ldrh	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	1c9a      	adds	r2, r3, #2
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ddc:	e011      	b.n	8002e02 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dde:	f7fe ffb9 	bl	8001d54 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d803      	bhi.n	8002df6 <HAL_SPI_Transmit+0x168>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d102      	bne.n	8002dfc <HAL_SPI_Transmit+0x16e>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e00:	e074      	b.n	8002eec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ce      	bne.n	8002daa <HAL_SPI_Transmit+0x11c>
 8002e0c:	e04c      	b.n	8002ea8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_SPI_Transmit+0x18e>
 8002e16:	8afb      	ldrh	r3, [r7, #22]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d140      	bne.n	8002e9e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	7812      	ldrb	r2, [r2, #0]
 8002e28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e42:	e02c      	b.n	8002e9e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d113      	bne.n	8002e7a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	7812      	ldrb	r2, [r2, #0]
 8002e5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e78:	e011      	b.n	8002e9e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e7a:	f7fe ff6b 	bl	8001d54 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d803      	bhi.n	8002e92 <HAL_SPI_Transmit+0x204>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d102      	bne.n	8002e98 <HAL_SPI_Transmit+0x20a>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e9c:	e026      	b.n	8002eec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1cd      	bne.n	8002e44 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fbcb 	bl	8003648 <SPI_EndRxTxTransaction>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e000      	b.n	8002eec <HAL_SPI_Transmit+0x25e>
  }

error:
 8002eea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3720      	adds	r7, #32
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b088      	sub	sp, #32
 8002f0a:	af02      	add	r7, sp, #8
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f22:	d112      	bne.n	8002f4a <HAL_SPI_Receive+0x44>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10e      	bne.n	8002f4a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f8f1 	bl	8003128 <HAL_SPI_TransmitReceive>
 8002f46:	4603      	mov	r3, r0
 8002f48:	e0ea      	b.n	8003120 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_SPI_Receive+0x52>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0e3      	b.n	8003120 <HAL_SPI_Receive+0x21a>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f60:	f7fe fef8 	bl	8001d54 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d002      	beq.n	8002f78 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
 8002f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f76:	e0ca      	b.n	800310e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Receive+0x7e>
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f88:	e0c1      	b.n	800310e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d007      	beq.n	8003010 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d162      	bne.n	80030de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003018:	e02e      	b.n	8003078 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d115      	bne.n	8003054 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f103 020c 	add.w	r2, r3, #12
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003052:	e011      	b.n	8003078 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003054:	f7fe fe7e 	bl	8001d54 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d803      	bhi.n	800306c <HAL_SPI_Receive+0x166>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d102      	bne.n	8003072 <HAL_SPI_Receive+0x16c>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003076:	e04a      	b.n	800310e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1cb      	bne.n	800301a <HAL_SPI_Receive+0x114>
 8003082:	e031      	b.n	80030e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d113      	bne.n	80030ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	b292      	uxth	r2, r2
 800309e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030b8:	e011      	b.n	80030de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ba:	f7fe fe4b 	bl	8001d54 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d803      	bhi.n	80030d2 <HAL_SPI_Receive+0x1cc>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d102      	bne.n	80030d8 <HAL_SPI_Receive+0x1d2>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030dc:	e017      	b.n	800310e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1cd      	bne.n	8003084 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	6839      	ldr	r1, [r7, #0]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fa45 	bl	800357c <SPI_EndRxTransaction>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
 800310a:	e000      	b.n	800310e <HAL_SPI_Receive+0x208>
  }

error :
 800310c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	; 0x30
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003136:	2301      	movs	r3, #1
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_SPI_TransmitReceive+0x26>
 800314a:	2302      	movs	r3, #2
 800314c:	e18a      	b.n	8003464 <HAL_SPI_TransmitReceive+0x33c>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003156:	f7fe fdfd 	bl	8001d54 <HAL_GetTick>
 800315a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003174:	2b01      	cmp	r3, #1
 8003176:	d00f      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x70>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317e:	d107      	bne.n	8003190 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <HAL_SPI_TransmitReceive+0x68>
 8003188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800318c:	2b04      	cmp	r3, #4
 800318e:	d003      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003196:	e15b      	b.n	8003450 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_SPI_TransmitReceive+0x82>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_SPI_TransmitReceive+0x82>
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031b0:	e14e      	b.n	8003450 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d003      	beq.n	80031c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	887a      	ldrh	r2, [r7, #2]
 80031d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	887a      	ldrh	r2, [r7, #2]
 80031ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d007      	beq.n	800321a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003222:	d178      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x10a>
 800322c:	8b7b      	ldrh	r3, [r7, #26]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d166      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	881a      	ldrh	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003256:	e053      	b.n	8003300 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d11b      	bne.n	800329e <HAL_SPI_TransmitReceive+0x176>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_SPI_TransmitReceive+0x176>
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d113      	bne.n	800329e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	1c9a      	adds	r2, r3, #2
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d119      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x1b8>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d014      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	b292      	uxth	r2, r2
 80032c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	1c9a      	adds	r2, r3, #2
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032dc:	2301      	movs	r3, #1
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032e0:	f7fe fd38 	bl	8001d54 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d807      	bhi.n	8003300 <HAL_SPI_TransmitReceive+0x1d8>
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d003      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032fe:	e0a7      	b.n	8003450 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1a6      	bne.n	8003258 <HAL_SPI_TransmitReceive+0x130>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1a1      	bne.n	8003258 <HAL_SPI_TransmitReceive+0x130>
 8003314:	e07c      	b.n	8003410 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x1fc>
 800331e:	8b7b      	ldrh	r3, [r7, #26]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d16b      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800334a:	e057      	b.n	80033fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d11c      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x26c>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x26c>
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d114      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d119      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x2ae>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d014      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033d2:	2301      	movs	r3, #1
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033d6:	f7fe fcbd 	bl	8001d54 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d803      	bhi.n	80033ee <HAL_SPI_TransmitReceive+0x2c6>
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d102      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x2cc>
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d103      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033fa:	e029      	b.n	8003450 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1a2      	bne.n	800334c <HAL_SPI_TransmitReceive+0x224>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d19d      	bne.n	800334c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f917 	bl	8003648 <SPI_EndRxTxTransaction>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800342c:	e010      	b.n	8003450 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	e000      	b.n	8003450 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800344e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003464:	4618      	mov	r0, r3
 8003466:	3730      	adds	r7, #48	; 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800347c:	f7fe fc6a 	bl	8001d54 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	4413      	add	r3, r2
 800348a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800348c:	f7fe fc62 	bl	8001d54 <HAL_GetTick>
 8003490:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	015b      	lsls	r3, r3, #5
 8003498:	0d1b      	lsrs	r3, r3, #20
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034a2:	e054      	b.n	800354e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d050      	beq.n	800354e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034ac:	f7fe fc52 	bl	8001d54 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d902      	bls.n	80034c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d13d      	bne.n	800353e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034da:	d111      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e4:	d004      	beq.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d107      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003508:	d10f      	bne.n	800352a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003528:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e017      	b.n	800356e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3b01      	subs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	429a      	cmp	r2, r3
 800356a:	d19b      	bne.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000028 	.word	0x20000028

0800357c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003590:	d111      	bne.n	80035b6 <SPI_EndRxTransaction+0x3a>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359a:	d004      	beq.n	80035a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d107      	bne.n	80035b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035be:	d12a      	bne.n	8003616 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c8:	d012      	beq.n	80035f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff ff49 	bl	800346c <SPI_WaitFlagStateUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d02d      	beq.n	800363c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e026      	b.n	800363e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2101      	movs	r1, #1
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7ff ff36 	bl	800346c <SPI_WaitFlagStateUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01a      	beq.n	800363c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e013      	b.n	800363e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2200      	movs	r2, #0
 800361e:	2101      	movs	r1, #1
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff ff23 	bl	800346c <SPI_WaitFlagStateUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e000      	b.n	800363e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <SPI_EndRxTxTransaction+0x7c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <SPI_EndRxTxTransaction+0x80>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0d5b      	lsrs	r3, r3, #21
 8003660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003672:	d112      	bne.n	800369a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2200      	movs	r2, #0
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff fef4 	bl	800346c <SPI_WaitFlagStateUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00f      	b.n	80036ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b80      	cmp	r3, #128	; 0x80
 80036b2:	d0f2      	beq.n	800369a <SPI_EndRxTxTransaction+0x52>
 80036b4:	e000      	b.n	80036b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80036b6:	bf00      	nop
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000028 	.word	0x20000028
 80036c8:	165e9f81 	.word	0x165e9f81

080036cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e03f      	b.n	800375e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe f9e4 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f929 	bl	8003968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b08a      	sub	sp, #40	; 0x28
 800376a:	af02      	add	r7, sp, #8
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	d17c      	bne.n	8003880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_UART_Transmit+0x2c>
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e075      	b.n	8003882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_UART_Transmit+0x3e>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e06e      	b.n	8003882 <HAL_UART_Transmit+0x11c>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2221      	movs	r2, #33	; 0x21
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ba:	f7fe facb 	bl	8001d54 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d108      	bne.n	80037e8 <HAL_UART_Transmit+0x82>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e003      	b.n	80037f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037f8:	e02a      	b.n	8003850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f840 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e036      	b.n	8003882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	3302      	adds	r3, #2
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e007      	b.n	8003842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1cf      	bne.n	80037fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2140      	movs	r1, #64	; 0x40
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f810 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e006      	b.n	8003882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b090      	sub	sp, #64	; 0x40
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389a:	e050      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d04c      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0x30>
 80038aa:	f7fe fa53 	bl	8001d54 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d241      	bcs.n	800393e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038da:	637a      	str	r2, [r7, #52]	; 0x34
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3314      	adds	r3, #20
 80038f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	613b      	str	r3, [r7, #16]
   return(result);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800390e:	623a      	str	r2, [r7, #32]
 8003910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	69f9      	ldr	r1, [r7, #28]
 8003914:	6a3a      	ldr	r2, [r7, #32]
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	61bb      	str	r3, [r7, #24]
   return(result);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e5      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e00f      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	429a      	cmp	r2, r3
 800395a:	d09f      	beq.n	800389c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3740      	adds	r7, #64	; 0x40
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	b09f      	sub	sp, #124	; 0x7c
 800396e:	af00      	add	r7, sp, #0
 8003970:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800397c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397e:	68d9      	ldr	r1, [r3, #12]
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	ea40 0301 	orr.w	r3, r0, r1
 8003988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	431a      	orrs	r2, r3
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	431a      	orrs	r2, r3
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4313      	orrs	r3, r2
 80039a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039ac:	f021 010c 	bic.w	r1, r1, #12
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b6:	430b      	orrs	r3, r1
 80039b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	6999      	ldr	r1, [r3, #24]
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	ea40 0301 	orr.w	r3, r0, r1
 80039d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4bc5      	ldr	r3, [pc, #788]	; (8003cec <UART_SetConfig+0x384>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d004      	beq.n	80039e6 <UART_SetConfig+0x7e>
 80039dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4bc3      	ldr	r3, [pc, #780]	; (8003cf0 <UART_SetConfig+0x388>)
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d103      	bne.n	80039ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e6:	f7ff f8b5 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 80039ea:	6778      	str	r0, [r7, #116]	; 0x74
 80039ec:	e002      	b.n	80039f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7ff f89d 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 80039f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fc:	f040 80b6 	bne.w	8003b6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a02:	461c      	mov	r4, r3
 8003a04:	f04f 0500 	mov.w	r5, #0
 8003a08:	4622      	mov	r2, r4
 8003a0a:	462b      	mov	r3, r5
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	6439      	str	r1, [r7, #64]	; 0x40
 8003a10:	415b      	adcs	r3, r3
 8003a12:	647b      	str	r3, [r7, #68]	; 0x44
 8003a14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a18:	1912      	adds	r2, r2, r4
 8003a1a:	eb45 0303 	adc.w	r3, r5, r3
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	00d9      	lsls	r1, r3, #3
 8003a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a2c:	00d0      	lsls	r0, r2, #3
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	1911      	adds	r1, r2, r4
 8003a34:	6639      	str	r1, [r7, #96]	; 0x60
 8003a36:	416b      	adcs	r3, r5
 8003a38:	667b      	str	r3, [r7, #100]	; 0x64
 8003a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	1891      	adds	r1, r2, r2
 8003a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a48:	415b      	adcs	r3, r3
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a54:	f7fc fc14 	bl	8000280 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4ba5      	ldr	r3, [pc, #660]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	011e      	lsls	r6, r3, #4
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	461c      	mov	r4, r3
 8003a6a:	f04f 0500 	mov.w	r5, #0
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	1891      	adds	r1, r2, r2
 8003a74:	6339      	str	r1, [r7, #48]	; 0x30
 8003a76:	415b      	adcs	r3, r3
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a7e:	1912      	adds	r2, r2, r4
 8003a80:	eb45 0303 	adc.w	r3, r5, r3
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	00d9      	lsls	r1, r3, #3
 8003a8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a92:	00d0      	lsls	r0, r2, #3
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	1911      	adds	r1, r2, r4
 8003a9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a9c:	416b      	adcs	r3, r5
 8003a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	1891      	adds	r1, r2, r2
 8003aac:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aae:	415b      	adcs	r3, r3
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003aba:	f7fc fbe1 	bl	8000280 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b8c      	ldr	r3, [pc, #560]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	; 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	3332      	adds	r3, #50	; 0x32
 8003ad6:	4a87      	ldr	r2, [pc, #540]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae4:	441e      	add	r6, r3
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	1894      	adds	r4, r2, r2
 8003af4:	623c      	str	r4, [r7, #32]
 8003af6:	415b      	adcs	r3, r3
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003afe:	1812      	adds	r2, r2, r0
 8003b00:	eb41 0303 	adc.w	r3, r1, r3
 8003b04:	f04f 0400 	mov.w	r4, #0
 8003b08:	f04f 0500 	mov.w	r5, #0
 8003b0c:	00dd      	lsls	r5, r3, #3
 8003b0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b12:	00d4      	lsls	r4, r2, #3
 8003b14:	4622      	mov	r2, r4
 8003b16:	462b      	mov	r3, r5
 8003b18:	1814      	adds	r4, r2, r0
 8003b1a:	653c      	str	r4, [r7, #80]	; 0x50
 8003b1c:	414b      	adcs	r3, r1
 8003b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	1891      	adds	r1, r2, r2
 8003b2c:	61b9      	str	r1, [r7, #24]
 8003b2e:	415b      	adcs	r3, r3
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b3a:	f7fc fba1 	bl	8000280 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4b6c      	ldr	r3, [pc, #432]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003b44:	fba3 1302 	umull	r1, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	2164      	movs	r1, #100	; 0x64
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	3332      	adds	r3, #50	; 0x32
 8003b56:	4a67      	ldr	r2, [pc, #412]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f003 0207 	and.w	r2, r3, #7
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4432      	add	r2, r6
 8003b68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b6a:	e0b9      	b.n	8003ce0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6e:	461c      	mov	r4, r3
 8003b70:	f04f 0500 	mov.w	r5, #0
 8003b74:	4622      	mov	r2, r4
 8003b76:	462b      	mov	r3, r5
 8003b78:	1891      	adds	r1, r2, r2
 8003b7a:	6139      	str	r1, [r7, #16]
 8003b7c:	415b      	adcs	r3, r3
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b84:	1912      	adds	r2, r2, r4
 8003b86:	eb45 0303 	adc.w	r3, r5, r3
 8003b8a:	f04f 0000 	mov.w	r0, #0
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	00d9      	lsls	r1, r3, #3
 8003b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b98:	00d0      	lsls	r0, r2, #3
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	eb12 0804 	adds.w	r8, r2, r4
 8003ba2:	eb43 0905 	adc.w	r9, r3, r5
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	008b      	lsls	r3, r1, #2
 8003bba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bbe:	0082      	lsls	r2, r0, #2
 8003bc0:	4640      	mov	r0, r8
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	f7fc fb5c 	bl	8000280 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4b49      	ldr	r3, [pc, #292]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003bce:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	011e      	lsls	r6, r3, #4
 8003bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	1894      	adds	r4, r2, r2
 8003be4:	60bc      	str	r4, [r7, #8]
 8003be6:	415b      	adcs	r3, r3
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bee:	1812      	adds	r2, r2, r0
 8003bf0:	eb41 0303 	adc.w	r3, r1, r3
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	f04f 0500 	mov.w	r5, #0
 8003bfc:	00dd      	lsls	r5, r3, #3
 8003bfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c02:	00d4      	lsls	r4, r2, #3
 8003c04:	4622      	mov	r2, r4
 8003c06:	462b      	mov	r3, r5
 8003c08:	1814      	adds	r4, r2, r0
 8003c0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	008b      	lsls	r3, r1, #2
 8003c24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c28:	0082      	lsls	r2, r0, #2
 8003c2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c2e:	f7fc fb27 	bl	8000280 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003c38:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	2164      	movs	r1, #100	; 0x64
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	3332      	adds	r3, #50	; 0x32
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c56:	441e      	add	r6, r3
 8003c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	1894      	adds	r4, r2, r2
 8003c66:	603c      	str	r4, [r7, #0]
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c70:	1812      	adds	r2, r2, r0
 8003c72:	eb41 0303 	adc.w	r3, r1, r3
 8003c76:	f04f 0400 	mov.w	r4, #0
 8003c7a:	f04f 0500 	mov.w	r5, #0
 8003c7e:	00dd      	lsls	r5, r3, #3
 8003c80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c84:	00d4      	lsls	r4, r2, #3
 8003c86:	4622      	mov	r2, r4
 8003c88:	462b      	mov	r3, r5
 8003c8a:	eb12 0a00 	adds.w	sl, r2, r0
 8003c8e:	eb43 0b01 	adc.w	fp, r3, r1
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	008b      	lsls	r3, r1, #2
 8003ca6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003caa:	0082      	lsls	r2, r0, #2
 8003cac:	4650      	mov	r0, sl
 8003cae:	4659      	mov	r1, fp
 8003cb0:	f7fc fae6 	bl	8000280 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003cba:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2164      	movs	r1, #100	; 0x64
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	3332      	adds	r3, #50	; 0x32
 8003ccc:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4432      	add	r2, r6
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	377c      	adds	r7, #124	; 0x7c
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	40011400 	.word	0x40011400
 8003cf4:	51eb851f 	.word	0x51eb851f

08003cf8 <__errno>:
 8003cf8:	4b01      	ldr	r3, [pc, #4]	; (8003d00 <__errno+0x8>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000034 	.word	0x20000034

08003d04 <__libc_init_array>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	4d0d      	ldr	r5, [pc, #52]	; (8003d3c <__libc_init_array+0x38>)
 8003d08:	4c0d      	ldr	r4, [pc, #52]	; (8003d40 <__libc_init_array+0x3c>)
 8003d0a:	1b64      	subs	r4, r4, r5
 8003d0c:	10a4      	asrs	r4, r4, #2
 8003d0e:	2600      	movs	r6, #0
 8003d10:	42a6      	cmp	r6, r4
 8003d12:	d109      	bne.n	8003d28 <__libc_init_array+0x24>
 8003d14:	4d0b      	ldr	r5, [pc, #44]	; (8003d44 <__libc_init_array+0x40>)
 8003d16:	4c0c      	ldr	r4, [pc, #48]	; (8003d48 <__libc_init_array+0x44>)
 8003d18:	f000 fc4e 	bl	80045b8 <_init>
 8003d1c:	1b64      	subs	r4, r4, r5
 8003d1e:	10a4      	asrs	r4, r4, #2
 8003d20:	2600      	movs	r6, #0
 8003d22:	42a6      	cmp	r6, r4
 8003d24:	d105      	bne.n	8003d32 <__libc_init_array+0x2e>
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2c:	4798      	blx	r3
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7ee      	b.n	8003d10 <__libc_init_array+0xc>
 8003d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d36:	4798      	blx	r3
 8003d38:	3601      	adds	r6, #1
 8003d3a:	e7f2      	b.n	8003d22 <__libc_init_array+0x1e>
 8003d3c:	08004b68 	.word	0x08004b68
 8003d40:	08004b68 	.word	0x08004b68
 8003d44:	08004b68 	.word	0x08004b68
 8003d48:	08004b6c 	.word	0x08004b6c

08003d4c <memcpy>:
 8003d4c:	440a      	add	r2, r1
 8003d4e:	4291      	cmp	r1, r2
 8003d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d54:	d100      	bne.n	8003d58 <memcpy+0xc>
 8003d56:	4770      	bx	lr
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d62:	4291      	cmp	r1, r2
 8003d64:	d1f9      	bne.n	8003d5a <memcpy+0xe>
 8003d66:	bd10      	pop	{r4, pc}

08003d68 <memset>:
 8003d68:	4402      	add	r2, r0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <memset+0xa>
 8003d70:	4770      	bx	lr
 8003d72:	f803 1b01 	strb.w	r1, [r3], #1
 8003d76:	e7f9      	b.n	8003d6c <memset+0x4>

08003d78 <siprintf>:
 8003d78:	b40e      	push	{r1, r2, r3}
 8003d7a:	b500      	push	{lr}
 8003d7c:	b09c      	sub	sp, #112	; 0x70
 8003d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d80:	9002      	str	r0, [sp, #8]
 8003d82:	9006      	str	r0, [sp, #24]
 8003d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d88:	4809      	ldr	r0, [pc, #36]	; (8003db0 <siprintf+0x38>)
 8003d8a:	9107      	str	r1, [sp, #28]
 8003d8c:	9104      	str	r1, [sp, #16]
 8003d8e:	4909      	ldr	r1, [pc, #36]	; (8003db4 <siprintf+0x3c>)
 8003d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d94:	9105      	str	r1, [sp, #20]
 8003d96:	6800      	ldr	r0, [r0, #0]
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	a902      	add	r1, sp, #8
 8003d9c:	f000 f868 	bl	8003e70 <_svfiprintf_r>
 8003da0:	9b02      	ldr	r3, [sp, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	b01c      	add	sp, #112	; 0x70
 8003da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dac:	b003      	add	sp, #12
 8003dae:	4770      	bx	lr
 8003db0:	20000034 	.word	0x20000034
 8003db4:	ffff0208 	.word	0xffff0208

08003db8 <__ssputs_r>:
 8003db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	688e      	ldr	r6, [r1, #8]
 8003dbe:	429e      	cmp	r6, r3
 8003dc0:	4682      	mov	sl, r0
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	4690      	mov	r8, r2
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	d838      	bhi.n	8003e3c <__ssputs_r+0x84>
 8003dca:	898a      	ldrh	r2, [r1, #12]
 8003dcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dd0:	d032      	beq.n	8003e38 <__ssputs_r+0x80>
 8003dd2:	6825      	ldr	r5, [r4, #0]
 8003dd4:	6909      	ldr	r1, [r1, #16]
 8003dd6:	eba5 0901 	sub.w	r9, r5, r1
 8003dda:	6965      	ldr	r5, [r4, #20]
 8003ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003de0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003de4:	3301      	adds	r3, #1
 8003de6:	444b      	add	r3, r9
 8003de8:	106d      	asrs	r5, r5, #1
 8003dea:	429d      	cmp	r5, r3
 8003dec:	bf38      	it	cc
 8003dee:	461d      	movcc	r5, r3
 8003df0:	0553      	lsls	r3, r2, #21
 8003df2:	d531      	bpl.n	8003e58 <__ssputs_r+0xa0>
 8003df4:	4629      	mov	r1, r5
 8003df6:	f000 fb39 	bl	800446c <_malloc_r>
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	b950      	cbnz	r0, 8003e14 <__ssputs_r+0x5c>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	f8ca 3000 	str.w	r3, [sl]
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0a:	81a3      	strh	r3, [r4, #12]
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e14:	6921      	ldr	r1, [r4, #16]
 8003e16:	464a      	mov	r2, r9
 8003e18:	f7ff ff98 	bl	8003d4c <memcpy>
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e26:	81a3      	strh	r3, [r4, #12]
 8003e28:	6126      	str	r6, [r4, #16]
 8003e2a:	6165      	str	r5, [r4, #20]
 8003e2c:	444e      	add	r6, r9
 8003e2e:	eba5 0509 	sub.w	r5, r5, r9
 8003e32:	6026      	str	r6, [r4, #0]
 8003e34:	60a5      	str	r5, [r4, #8]
 8003e36:	463e      	mov	r6, r7
 8003e38:	42be      	cmp	r6, r7
 8003e3a:	d900      	bls.n	8003e3e <__ssputs_r+0x86>
 8003e3c:	463e      	mov	r6, r7
 8003e3e:	4632      	mov	r2, r6
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	4641      	mov	r1, r8
 8003e44:	f000 faa8 	bl	8004398 <memmove>
 8003e48:	68a3      	ldr	r3, [r4, #8]
 8003e4a:	6822      	ldr	r2, [r4, #0]
 8003e4c:	1b9b      	subs	r3, r3, r6
 8003e4e:	4432      	add	r2, r6
 8003e50:	60a3      	str	r3, [r4, #8]
 8003e52:	6022      	str	r2, [r4, #0]
 8003e54:	2000      	movs	r0, #0
 8003e56:	e7db      	b.n	8003e10 <__ssputs_r+0x58>
 8003e58:	462a      	mov	r2, r5
 8003e5a:	f000 fb61 	bl	8004520 <_realloc_r>
 8003e5e:	4606      	mov	r6, r0
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d1e1      	bne.n	8003e28 <__ssputs_r+0x70>
 8003e64:	6921      	ldr	r1, [r4, #16]
 8003e66:	4650      	mov	r0, sl
 8003e68:	f000 fab0 	bl	80043cc <_free_r>
 8003e6c:	e7c7      	b.n	8003dfe <__ssputs_r+0x46>
	...

08003e70 <_svfiprintf_r>:
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e74:	4698      	mov	r8, r3
 8003e76:	898b      	ldrh	r3, [r1, #12]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	b09d      	sub	sp, #116	; 0x74
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	460d      	mov	r5, r1
 8003e80:	4614      	mov	r4, r2
 8003e82:	d50e      	bpl.n	8003ea2 <_svfiprintf_r+0x32>
 8003e84:	690b      	ldr	r3, [r1, #16]
 8003e86:	b963      	cbnz	r3, 8003ea2 <_svfiprintf_r+0x32>
 8003e88:	2140      	movs	r1, #64	; 0x40
 8003e8a:	f000 faef 	bl	800446c <_malloc_r>
 8003e8e:	6028      	str	r0, [r5, #0]
 8003e90:	6128      	str	r0, [r5, #16]
 8003e92:	b920      	cbnz	r0, 8003e9e <_svfiprintf_r+0x2e>
 8003e94:	230c      	movs	r3, #12
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	e0d1      	b.n	8004042 <_svfiprintf_r+0x1d2>
 8003e9e:	2340      	movs	r3, #64	; 0x40
 8003ea0:	616b      	str	r3, [r5, #20]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eb0:	2330      	movs	r3, #48	; 0x30
 8003eb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800405c <_svfiprintf_r+0x1ec>
 8003eb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eba:	f04f 0901 	mov.w	r9, #1
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	469a      	mov	sl, r3
 8003ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ec6:	b10a      	cbz	r2, 8003ecc <_svfiprintf_r+0x5c>
 8003ec8:	2a25      	cmp	r2, #37	; 0x25
 8003eca:	d1f9      	bne.n	8003ec0 <_svfiprintf_r+0x50>
 8003ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed0:	d00b      	beq.n	8003eea <_svfiprintf_r+0x7a>
 8003ed2:	465b      	mov	r3, fp
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f7ff ff6d 	bl	8003db8 <__ssputs_r>
 8003ede:	3001      	adds	r0, #1
 8003ee0:	f000 80aa 	beq.w	8004038 <_svfiprintf_r+0x1c8>
 8003ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ee6:	445a      	add	r2, fp
 8003ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8003eea:	f89a 3000 	ldrb.w	r3, [sl]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80a2 	beq.w	8004038 <_svfiprintf_r+0x1c8>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8003efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003efe:	f10a 0a01 	add.w	sl, sl, #1
 8003f02:	9304      	str	r3, [sp, #16]
 8003f04:	9307      	str	r3, [sp, #28]
 8003f06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f0c:	4654      	mov	r4, sl
 8003f0e:	2205      	movs	r2, #5
 8003f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f14:	4851      	ldr	r0, [pc, #324]	; (800405c <_svfiprintf_r+0x1ec>)
 8003f16:	f7fc f963 	bl	80001e0 <memchr>
 8003f1a:	9a04      	ldr	r2, [sp, #16]
 8003f1c:	b9d8      	cbnz	r0, 8003f56 <_svfiprintf_r+0xe6>
 8003f1e:	06d0      	lsls	r0, r2, #27
 8003f20:	bf44      	itt	mi
 8003f22:	2320      	movmi	r3, #32
 8003f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f28:	0711      	lsls	r1, r2, #28
 8003f2a:	bf44      	itt	mi
 8003f2c:	232b      	movmi	r3, #43	; 0x2b
 8003f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f32:	f89a 3000 	ldrb.w	r3, [sl]
 8003f36:	2b2a      	cmp	r3, #42	; 0x2a
 8003f38:	d015      	beq.n	8003f66 <_svfiprintf_r+0xf6>
 8003f3a:	9a07      	ldr	r2, [sp, #28]
 8003f3c:	4654      	mov	r4, sl
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f04f 0c0a 	mov.w	ip, #10
 8003f44:	4621      	mov	r1, r4
 8003f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f4a:	3b30      	subs	r3, #48	; 0x30
 8003f4c:	2b09      	cmp	r3, #9
 8003f4e:	d94e      	bls.n	8003fee <_svfiprintf_r+0x17e>
 8003f50:	b1b0      	cbz	r0, 8003f80 <_svfiprintf_r+0x110>
 8003f52:	9207      	str	r2, [sp, #28]
 8003f54:	e014      	b.n	8003f80 <_svfiprintf_r+0x110>
 8003f56:	eba0 0308 	sub.w	r3, r0, r8
 8003f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	9304      	str	r3, [sp, #16]
 8003f62:	46a2      	mov	sl, r4
 8003f64:	e7d2      	b.n	8003f0c <_svfiprintf_r+0x9c>
 8003f66:	9b03      	ldr	r3, [sp, #12]
 8003f68:	1d19      	adds	r1, r3, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	9103      	str	r1, [sp, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bfbb      	ittet	lt
 8003f72:	425b      	neglt	r3, r3
 8003f74:	f042 0202 	orrlt.w	r2, r2, #2
 8003f78:	9307      	strge	r3, [sp, #28]
 8003f7a:	9307      	strlt	r3, [sp, #28]
 8003f7c:	bfb8      	it	lt
 8003f7e:	9204      	strlt	r2, [sp, #16]
 8003f80:	7823      	ldrb	r3, [r4, #0]
 8003f82:	2b2e      	cmp	r3, #46	; 0x2e
 8003f84:	d10c      	bne.n	8003fa0 <_svfiprintf_r+0x130>
 8003f86:	7863      	ldrb	r3, [r4, #1]
 8003f88:	2b2a      	cmp	r3, #42	; 0x2a
 8003f8a:	d135      	bne.n	8003ff8 <_svfiprintf_r+0x188>
 8003f8c:	9b03      	ldr	r3, [sp, #12]
 8003f8e:	1d1a      	adds	r2, r3, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	9203      	str	r2, [sp, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bfb8      	it	lt
 8003f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f9c:	3402      	adds	r4, #2
 8003f9e:	9305      	str	r3, [sp, #20]
 8003fa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800406c <_svfiprintf_r+0x1fc>
 8003fa4:	7821      	ldrb	r1, [r4, #0]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	4650      	mov	r0, sl
 8003faa:	f7fc f919 	bl	80001e0 <memchr>
 8003fae:	b140      	cbz	r0, 8003fc2 <_svfiprintf_r+0x152>
 8003fb0:	2340      	movs	r3, #64	; 0x40
 8003fb2:	eba0 000a 	sub.w	r0, r0, sl
 8003fb6:	fa03 f000 	lsl.w	r0, r3, r0
 8003fba:	9b04      	ldr	r3, [sp, #16]
 8003fbc:	4303      	orrs	r3, r0
 8003fbe:	3401      	adds	r4, #1
 8003fc0:	9304      	str	r3, [sp, #16]
 8003fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc6:	4826      	ldr	r0, [pc, #152]	; (8004060 <_svfiprintf_r+0x1f0>)
 8003fc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fcc:	2206      	movs	r2, #6
 8003fce:	f7fc f907 	bl	80001e0 <memchr>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d038      	beq.n	8004048 <_svfiprintf_r+0x1d8>
 8003fd6:	4b23      	ldr	r3, [pc, #140]	; (8004064 <_svfiprintf_r+0x1f4>)
 8003fd8:	bb1b      	cbnz	r3, 8004022 <_svfiprintf_r+0x1b2>
 8003fda:	9b03      	ldr	r3, [sp, #12]
 8003fdc:	3307      	adds	r3, #7
 8003fde:	f023 0307 	bic.w	r3, r3, #7
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe8:	4433      	add	r3, r6
 8003fea:	9309      	str	r3, [sp, #36]	; 0x24
 8003fec:	e767      	b.n	8003ebe <_svfiprintf_r+0x4e>
 8003fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	e7a5      	b.n	8003f44 <_svfiprintf_r+0xd4>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	3401      	adds	r4, #1
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 0c0a 	mov.w	ip, #10
 8004004:	4620      	mov	r0, r4
 8004006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800400a:	3a30      	subs	r2, #48	; 0x30
 800400c:	2a09      	cmp	r2, #9
 800400e:	d903      	bls.n	8004018 <_svfiprintf_r+0x1a8>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0c5      	beq.n	8003fa0 <_svfiprintf_r+0x130>
 8004014:	9105      	str	r1, [sp, #20]
 8004016:	e7c3      	b.n	8003fa0 <_svfiprintf_r+0x130>
 8004018:	fb0c 2101 	mla	r1, ip, r1, r2
 800401c:	4604      	mov	r4, r0
 800401e:	2301      	movs	r3, #1
 8004020:	e7f0      	b.n	8004004 <_svfiprintf_r+0x194>
 8004022:	ab03      	add	r3, sp, #12
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	462a      	mov	r2, r5
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <_svfiprintf_r+0x1f8>)
 800402a:	a904      	add	r1, sp, #16
 800402c:	4638      	mov	r0, r7
 800402e:	f3af 8000 	nop.w
 8004032:	1c42      	adds	r2, r0, #1
 8004034:	4606      	mov	r6, r0
 8004036:	d1d6      	bne.n	8003fe6 <_svfiprintf_r+0x176>
 8004038:	89ab      	ldrh	r3, [r5, #12]
 800403a:	065b      	lsls	r3, r3, #25
 800403c:	f53f af2c 	bmi.w	8003e98 <_svfiprintf_r+0x28>
 8004040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004042:	b01d      	add	sp, #116	; 0x74
 8004044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004048:	ab03      	add	r3, sp, #12
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	462a      	mov	r2, r5
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <_svfiprintf_r+0x1f8>)
 8004050:	a904      	add	r1, sp, #16
 8004052:	4638      	mov	r0, r7
 8004054:	f000 f87a 	bl	800414c <_printf_i>
 8004058:	e7eb      	b.n	8004032 <_svfiprintf_r+0x1c2>
 800405a:	bf00      	nop
 800405c:	08004b2c 	.word	0x08004b2c
 8004060:	08004b36 	.word	0x08004b36
 8004064:	00000000 	.word	0x00000000
 8004068:	08003db9 	.word	0x08003db9
 800406c:	08004b32 	.word	0x08004b32

08004070 <_printf_common>:
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	4616      	mov	r6, r2
 8004076:	4699      	mov	r9, r3
 8004078:	688a      	ldr	r2, [r1, #8]
 800407a:	690b      	ldr	r3, [r1, #16]
 800407c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004080:	4293      	cmp	r3, r2
 8004082:	bfb8      	it	lt
 8004084:	4613      	movlt	r3, r2
 8004086:	6033      	str	r3, [r6, #0]
 8004088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800408c:	4607      	mov	r7, r0
 800408e:	460c      	mov	r4, r1
 8004090:	b10a      	cbz	r2, 8004096 <_printf_common+0x26>
 8004092:	3301      	adds	r3, #1
 8004094:	6033      	str	r3, [r6, #0]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	0699      	lsls	r1, r3, #26
 800409a:	bf42      	ittt	mi
 800409c:	6833      	ldrmi	r3, [r6, #0]
 800409e:	3302      	addmi	r3, #2
 80040a0:	6033      	strmi	r3, [r6, #0]
 80040a2:	6825      	ldr	r5, [r4, #0]
 80040a4:	f015 0506 	ands.w	r5, r5, #6
 80040a8:	d106      	bne.n	80040b8 <_printf_common+0x48>
 80040aa:	f104 0a19 	add.w	sl, r4, #25
 80040ae:	68e3      	ldr	r3, [r4, #12]
 80040b0:	6832      	ldr	r2, [r6, #0]
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	42ab      	cmp	r3, r5
 80040b6:	dc26      	bgt.n	8004106 <_printf_common+0x96>
 80040b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040bc:	1e13      	subs	r3, r2, #0
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	bf18      	it	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	0692      	lsls	r2, r2, #26
 80040c6:	d42b      	bmi.n	8004120 <_printf_common+0xb0>
 80040c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040cc:	4649      	mov	r1, r9
 80040ce:	4638      	mov	r0, r7
 80040d0:	47c0      	blx	r8
 80040d2:	3001      	adds	r0, #1
 80040d4:	d01e      	beq.n	8004114 <_printf_common+0xa4>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	68e5      	ldr	r5, [r4, #12]
 80040da:	6832      	ldr	r2, [r6, #0]
 80040dc:	f003 0306 	and.w	r3, r3, #6
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	bf08      	it	eq
 80040e4:	1aad      	subeq	r5, r5, r2
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	6922      	ldr	r2, [r4, #16]
 80040ea:	bf0c      	ite	eq
 80040ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f0:	2500      	movne	r5, #0
 80040f2:	4293      	cmp	r3, r2
 80040f4:	bfc4      	itt	gt
 80040f6:	1a9b      	subgt	r3, r3, r2
 80040f8:	18ed      	addgt	r5, r5, r3
 80040fa:	2600      	movs	r6, #0
 80040fc:	341a      	adds	r4, #26
 80040fe:	42b5      	cmp	r5, r6
 8004100:	d11a      	bne.n	8004138 <_printf_common+0xc8>
 8004102:	2000      	movs	r0, #0
 8004104:	e008      	b.n	8004118 <_printf_common+0xa8>
 8004106:	2301      	movs	r3, #1
 8004108:	4652      	mov	r2, sl
 800410a:	4649      	mov	r1, r9
 800410c:	4638      	mov	r0, r7
 800410e:	47c0      	blx	r8
 8004110:	3001      	adds	r0, #1
 8004112:	d103      	bne.n	800411c <_printf_common+0xac>
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411c:	3501      	adds	r5, #1
 800411e:	e7c6      	b.n	80040ae <_printf_common+0x3e>
 8004120:	18e1      	adds	r1, r4, r3
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	2030      	movs	r0, #48	; 0x30
 8004126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800412a:	4422      	add	r2, r4
 800412c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004134:	3302      	adds	r3, #2
 8004136:	e7c7      	b.n	80040c8 <_printf_common+0x58>
 8004138:	2301      	movs	r3, #1
 800413a:	4622      	mov	r2, r4
 800413c:	4649      	mov	r1, r9
 800413e:	4638      	mov	r0, r7
 8004140:	47c0      	blx	r8
 8004142:	3001      	adds	r0, #1
 8004144:	d0e6      	beq.n	8004114 <_printf_common+0xa4>
 8004146:	3601      	adds	r6, #1
 8004148:	e7d9      	b.n	80040fe <_printf_common+0x8e>
	...

0800414c <_printf_i>:
 800414c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	460c      	mov	r4, r1
 8004152:	4691      	mov	r9, r2
 8004154:	7e27      	ldrb	r7, [r4, #24]
 8004156:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004158:	2f78      	cmp	r7, #120	; 0x78
 800415a:	4680      	mov	r8, r0
 800415c:	469a      	mov	sl, r3
 800415e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004162:	d807      	bhi.n	8004174 <_printf_i+0x28>
 8004164:	2f62      	cmp	r7, #98	; 0x62
 8004166:	d80a      	bhi.n	800417e <_printf_i+0x32>
 8004168:	2f00      	cmp	r7, #0
 800416a:	f000 80d8 	beq.w	800431e <_printf_i+0x1d2>
 800416e:	2f58      	cmp	r7, #88	; 0x58
 8004170:	f000 80a3 	beq.w	80042ba <_printf_i+0x16e>
 8004174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800417c:	e03a      	b.n	80041f4 <_printf_i+0xa8>
 800417e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004182:	2b15      	cmp	r3, #21
 8004184:	d8f6      	bhi.n	8004174 <_printf_i+0x28>
 8004186:	a001      	add	r0, pc, #4	; (adr r0, 800418c <_printf_i+0x40>)
 8004188:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800418c:	080041e5 	.word	0x080041e5
 8004190:	080041f9 	.word	0x080041f9
 8004194:	08004175 	.word	0x08004175
 8004198:	08004175 	.word	0x08004175
 800419c:	08004175 	.word	0x08004175
 80041a0:	08004175 	.word	0x08004175
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004175 	.word	0x08004175
 80041ac:	08004175 	.word	0x08004175
 80041b0:	08004175 	.word	0x08004175
 80041b4:	08004175 	.word	0x08004175
 80041b8:	08004305 	.word	0x08004305
 80041bc:	08004229 	.word	0x08004229
 80041c0:	080042e7 	.word	0x080042e7
 80041c4:	08004175 	.word	0x08004175
 80041c8:	08004175 	.word	0x08004175
 80041cc:	08004327 	.word	0x08004327
 80041d0:	08004175 	.word	0x08004175
 80041d4:	08004229 	.word	0x08004229
 80041d8:	08004175 	.word	0x08004175
 80041dc:	08004175 	.word	0x08004175
 80041e0:	080042ef 	.word	0x080042ef
 80041e4:	680b      	ldr	r3, [r1, #0]
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	600a      	str	r2, [r1, #0]
 80041ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0a3      	b.n	8004340 <_printf_i+0x1f4>
 80041f8:	6825      	ldr	r5, [r4, #0]
 80041fa:	6808      	ldr	r0, [r1, #0]
 80041fc:	062e      	lsls	r6, r5, #24
 80041fe:	f100 0304 	add.w	r3, r0, #4
 8004202:	d50a      	bpl.n	800421a <_printf_i+0xce>
 8004204:	6805      	ldr	r5, [r0, #0]
 8004206:	600b      	str	r3, [r1, #0]
 8004208:	2d00      	cmp	r5, #0
 800420a:	da03      	bge.n	8004214 <_printf_i+0xc8>
 800420c:	232d      	movs	r3, #45	; 0x2d
 800420e:	426d      	negs	r5, r5
 8004210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004214:	485e      	ldr	r0, [pc, #376]	; (8004390 <_printf_i+0x244>)
 8004216:	230a      	movs	r3, #10
 8004218:	e019      	b.n	800424e <_printf_i+0x102>
 800421a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800421e:	6805      	ldr	r5, [r0, #0]
 8004220:	600b      	str	r3, [r1, #0]
 8004222:	bf18      	it	ne
 8004224:	b22d      	sxthne	r5, r5
 8004226:	e7ef      	b.n	8004208 <_printf_i+0xbc>
 8004228:	680b      	ldr	r3, [r1, #0]
 800422a:	6825      	ldr	r5, [r4, #0]
 800422c:	1d18      	adds	r0, r3, #4
 800422e:	6008      	str	r0, [r1, #0]
 8004230:	0628      	lsls	r0, r5, #24
 8004232:	d501      	bpl.n	8004238 <_printf_i+0xec>
 8004234:	681d      	ldr	r5, [r3, #0]
 8004236:	e002      	b.n	800423e <_printf_i+0xf2>
 8004238:	0669      	lsls	r1, r5, #25
 800423a:	d5fb      	bpl.n	8004234 <_printf_i+0xe8>
 800423c:	881d      	ldrh	r5, [r3, #0]
 800423e:	4854      	ldr	r0, [pc, #336]	; (8004390 <_printf_i+0x244>)
 8004240:	2f6f      	cmp	r7, #111	; 0x6f
 8004242:	bf0c      	ite	eq
 8004244:	2308      	moveq	r3, #8
 8004246:	230a      	movne	r3, #10
 8004248:	2100      	movs	r1, #0
 800424a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800424e:	6866      	ldr	r6, [r4, #4]
 8004250:	60a6      	str	r6, [r4, #8]
 8004252:	2e00      	cmp	r6, #0
 8004254:	bfa2      	ittt	ge
 8004256:	6821      	ldrge	r1, [r4, #0]
 8004258:	f021 0104 	bicge.w	r1, r1, #4
 800425c:	6021      	strge	r1, [r4, #0]
 800425e:	b90d      	cbnz	r5, 8004264 <_printf_i+0x118>
 8004260:	2e00      	cmp	r6, #0
 8004262:	d04d      	beq.n	8004300 <_printf_i+0x1b4>
 8004264:	4616      	mov	r6, r2
 8004266:	fbb5 f1f3 	udiv	r1, r5, r3
 800426a:	fb03 5711 	mls	r7, r3, r1, r5
 800426e:	5dc7      	ldrb	r7, [r0, r7]
 8004270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004274:	462f      	mov	r7, r5
 8004276:	42bb      	cmp	r3, r7
 8004278:	460d      	mov	r5, r1
 800427a:	d9f4      	bls.n	8004266 <_printf_i+0x11a>
 800427c:	2b08      	cmp	r3, #8
 800427e:	d10b      	bne.n	8004298 <_printf_i+0x14c>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	07df      	lsls	r7, r3, #31
 8004284:	d508      	bpl.n	8004298 <_printf_i+0x14c>
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	6861      	ldr	r1, [r4, #4]
 800428a:	4299      	cmp	r1, r3
 800428c:	bfde      	ittt	le
 800428e:	2330      	movle	r3, #48	; 0x30
 8004290:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004294:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004298:	1b92      	subs	r2, r2, r6
 800429a:	6122      	str	r2, [r4, #16]
 800429c:	f8cd a000 	str.w	sl, [sp]
 80042a0:	464b      	mov	r3, r9
 80042a2:	aa03      	add	r2, sp, #12
 80042a4:	4621      	mov	r1, r4
 80042a6:	4640      	mov	r0, r8
 80042a8:	f7ff fee2 	bl	8004070 <_printf_common>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d14c      	bne.n	800434a <_printf_i+0x1fe>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	b004      	add	sp, #16
 80042b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ba:	4835      	ldr	r0, [pc, #212]	; (8004390 <_printf_i+0x244>)
 80042bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	680e      	ldr	r6, [r1, #0]
 80042c4:	061f      	lsls	r7, r3, #24
 80042c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80042ca:	600e      	str	r6, [r1, #0]
 80042cc:	d514      	bpl.n	80042f8 <_printf_i+0x1ac>
 80042ce:	07d9      	lsls	r1, r3, #31
 80042d0:	bf44      	itt	mi
 80042d2:	f043 0320 	orrmi.w	r3, r3, #32
 80042d6:	6023      	strmi	r3, [r4, #0]
 80042d8:	b91d      	cbnz	r5, 80042e2 <_printf_i+0x196>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	f023 0320 	bic.w	r3, r3, #32
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	2310      	movs	r3, #16
 80042e4:	e7b0      	b.n	8004248 <_printf_i+0xfc>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	f043 0320 	orr.w	r3, r3, #32
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	2378      	movs	r3, #120	; 0x78
 80042f0:	4828      	ldr	r0, [pc, #160]	; (8004394 <_printf_i+0x248>)
 80042f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042f6:	e7e3      	b.n	80042c0 <_printf_i+0x174>
 80042f8:	065e      	lsls	r6, r3, #25
 80042fa:	bf48      	it	mi
 80042fc:	b2ad      	uxthmi	r5, r5
 80042fe:	e7e6      	b.n	80042ce <_printf_i+0x182>
 8004300:	4616      	mov	r6, r2
 8004302:	e7bb      	b.n	800427c <_printf_i+0x130>
 8004304:	680b      	ldr	r3, [r1, #0]
 8004306:	6826      	ldr	r6, [r4, #0]
 8004308:	6960      	ldr	r0, [r4, #20]
 800430a:	1d1d      	adds	r5, r3, #4
 800430c:	600d      	str	r5, [r1, #0]
 800430e:	0635      	lsls	r5, r6, #24
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	d501      	bpl.n	8004318 <_printf_i+0x1cc>
 8004314:	6018      	str	r0, [r3, #0]
 8004316:	e002      	b.n	800431e <_printf_i+0x1d2>
 8004318:	0671      	lsls	r1, r6, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0x1c8>
 800431c:	8018      	strh	r0, [r3, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	6123      	str	r3, [r4, #16]
 8004322:	4616      	mov	r6, r2
 8004324:	e7ba      	b.n	800429c <_printf_i+0x150>
 8004326:	680b      	ldr	r3, [r1, #0]
 8004328:	1d1a      	adds	r2, r3, #4
 800432a:	600a      	str	r2, [r1, #0]
 800432c:	681e      	ldr	r6, [r3, #0]
 800432e:	6862      	ldr	r2, [r4, #4]
 8004330:	2100      	movs	r1, #0
 8004332:	4630      	mov	r0, r6
 8004334:	f7fb ff54 	bl	80001e0 <memchr>
 8004338:	b108      	cbz	r0, 800433e <_printf_i+0x1f2>
 800433a:	1b80      	subs	r0, r0, r6
 800433c:	6060      	str	r0, [r4, #4]
 800433e:	6863      	ldr	r3, [r4, #4]
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	2300      	movs	r3, #0
 8004344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004348:	e7a8      	b.n	800429c <_printf_i+0x150>
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	4632      	mov	r2, r6
 800434e:	4649      	mov	r1, r9
 8004350:	4640      	mov	r0, r8
 8004352:	47d0      	blx	sl
 8004354:	3001      	adds	r0, #1
 8004356:	d0ab      	beq.n	80042b0 <_printf_i+0x164>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	079b      	lsls	r3, r3, #30
 800435c:	d413      	bmi.n	8004386 <_printf_i+0x23a>
 800435e:	68e0      	ldr	r0, [r4, #12]
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	4298      	cmp	r0, r3
 8004364:	bfb8      	it	lt
 8004366:	4618      	movlt	r0, r3
 8004368:	e7a4      	b.n	80042b4 <_printf_i+0x168>
 800436a:	2301      	movs	r3, #1
 800436c:	4632      	mov	r2, r6
 800436e:	4649      	mov	r1, r9
 8004370:	4640      	mov	r0, r8
 8004372:	47d0      	blx	sl
 8004374:	3001      	adds	r0, #1
 8004376:	d09b      	beq.n	80042b0 <_printf_i+0x164>
 8004378:	3501      	adds	r5, #1
 800437a:	68e3      	ldr	r3, [r4, #12]
 800437c:	9903      	ldr	r1, [sp, #12]
 800437e:	1a5b      	subs	r3, r3, r1
 8004380:	42ab      	cmp	r3, r5
 8004382:	dcf2      	bgt.n	800436a <_printf_i+0x21e>
 8004384:	e7eb      	b.n	800435e <_printf_i+0x212>
 8004386:	2500      	movs	r5, #0
 8004388:	f104 0619 	add.w	r6, r4, #25
 800438c:	e7f5      	b.n	800437a <_printf_i+0x22e>
 800438e:	bf00      	nop
 8004390:	08004b3d 	.word	0x08004b3d
 8004394:	08004b4e 	.word	0x08004b4e

08004398 <memmove>:
 8004398:	4288      	cmp	r0, r1
 800439a:	b510      	push	{r4, lr}
 800439c:	eb01 0402 	add.w	r4, r1, r2
 80043a0:	d902      	bls.n	80043a8 <memmove+0x10>
 80043a2:	4284      	cmp	r4, r0
 80043a4:	4623      	mov	r3, r4
 80043a6:	d807      	bhi.n	80043b8 <memmove+0x20>
 80043a8:	1e43      	subs	r3, r0, #1
 80043aa:	42a1      	cmp	r1, r4
 80043ac:	d008      	beq.n	80043c0 <memmove+0x28>
 80043ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043b6:	e7f8      	b.n	80043aa <memmove+0x12>
 80043b8:	4402      	add	r2, r0
 80043ba:	4601      	mov	r1, r0
 80043bc:	428a      	cmp	r2, r1
 80043be:	d100      	bne.n	80043c2 <memmove+0x2a>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043ca:	e7f7      	b.n	80043bc <memmove+0x24>

080043cc <_free_r>:
 80043cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ce:	2900      	cmp	r1, #0
 80043d0:	d048      	beq.n	8004464 <_free_r+0x98>
 80043d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d6:	9001      	str	r0, [sp, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f1a1 0404 	sub.w	r4, r1, #4
 80043de:	bfb8      	it	lt
 80043e0:	18e4      	addlt	r4, r4, r3
 80043e2:	f000 f8d3 	bl	800458c <__malloc_lock>
 80043e6:	4a20      	ldr	r2, [pc, #128]	; (8004468 <_free_r+0x9c>)
 80043e8:	9801      	ldr	r0, [sp, #4]
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	4615      	mov	r5, r2
 80043ee:	b933      	cbnz	r3, 80043fe <_free_r+0x32>
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	6014      	str	r4, [r2, #0]
 80043f4:	b003      	add	sp, #12
 80043f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043fa:	f000 b8cd 	b.w	8004598 <__malloc_unlock>
 80043fe:	42a3      	cmp	r3, r4
 8004400:	d90b      	bls.n	800441a <_free_r+0x4e>
 8004402:	6821      	ldr	r1, [r4, #0]
 8004404:	1862      	adds	r2, r4, r1
 8004406:	4293      	cmp	r3, r2
 8004408:	bf04      	itt	eq
 800440a:	681a      	ldreq	r2, [r3, #0]
 800440c:	685b      	ldreq	r3, [r3, #4]
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	bf04      	itt	eq
 8004412:	1852      	addeq	r2, r2, r1
 8004414:	6022      	streq	r2, [r4, #0]
 8004416:	602c      	str	r4, [r5, #0]
 8004418:	e7ec      	b.n	80043f4 <_free_r+0x28>
 800441a:	461a      	mov	r2, r3
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b10b      	cbz	r3, 8004424 <_free_r+0x58>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d9fa      	bls.n	800441a <_free_r+0x4e>
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	1855      	adds	r5, r2, r1
 8004428:	42a5      	cmp	r5, r4
 800442a:	d10b      	bne.n	8004444 <_free_r+0x78>
 800442c:	6824      	ldr	r4, [r4, #0]
 800442e:	4421      	add	r1, r4
 8004430:	1854      	adds	r4, r2, r1
 8004432:	42a3      	cmp	r3, r4
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	d1dd      	bne.n	80043f4 <_free_r+0x28>
 8004438:	681c      	ldr	r4, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	4421      	add	r1, r4
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	e7d7      	b.n	80043f4 <_free_r+0x28>
 8004444:	d902      	bls.n	800444c <_free_r+0x80>
 8004446:	230c      	movs	r3, #12
 8004448:	6003      	str	r3, [r0, #0]
 800444a:	e7d3      	b.n	80043f4 <_free_r+0x28>
 800444c:	6825      	ldr	r5, [r4, #0]
 800444e:	1961      	adds	r1, r4, r5
 8004450:	428b      	cmp	r3, r1
 8004452:	bf04      	itt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	bf04      	itt	eq
 800445c:	1949      	addeq	r1, r1, r5
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	6054      	str	r4, [r2, #4]
 8004462:	e7c7      	b.n	80043f4 <_free_r+0x28>
 8004464:	b003      	add	sp, #12
 8004466:	bd30      	pop	{r4, r5, pc}
 8004468:	20000164 	.word	0x20000164

0800446c <_malloc_r>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	1ccd      	adds	r5, r1, #3
 8004470:	f025 0503 	bic.w	r5, r5, #3
 8004474:	3508      	adds	r5, #8
 8004476:	2d0c      	cmp	r5, #12
 8004478:	bf38      	it	cc
 800447a:	250c      	movcc	r5, #12
 800447c:	2d00      	cmp	r5, #0
 800447e:	4606      	mov	r6, r0
 8004480:	db01      	blt.n	8004486 <_malloc_r+0x1a>
 8004482:	42a9      	cmp	r1, r5
 8004484:	d903      	bls.n	800448e <_malloc_r+0x22>
 8004486:	230c      	movs	r3, #12
 8004488:	6033      	str	r3, [r6, #0]
 800448a:	2000      	movs	r0, #0
 800448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448e:	f000 f87d 	bl	800458c <__malloc_lock>
 8004492:	4921      	ldr	r1, [pc, #132]	; (8004518 <_malloc_r+0xac>)
 8004494:	680a      	ldr	r2, [r1, #0]
 8004496:	4614      	mov	r4, r2
 8004498:	b99c      	cbnz	r4, 80044c2 <_malloc_r+0x56>
 800449a:	4f20      	ldr	r7, [pc, #128]	; (800451c <_malloc_r+0xb0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	b923      	cbnz	r3, 80044aa <_malloc_r+0x3e>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4630      	mov	r0, r6
 80044a4:	f000 f862 	bl	800456c <_sbrk_r>
 80044a8:	6038      	str	r0, [r7, #0]
 80044aa:	4629      	mov	r1, r5
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f85d 	bl	800456c <_sbrk_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	d123      	bne.n	80044fe <_malloc_r+0x92>
 80044b6:	230c      	movs	r3, #12
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 f86c 	bl	8004598 <__malloc_unlock>
 80044c0:	e7e3      	b.n	800448a <_malloc_r+0x1e>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	1b5b      	subs	r3, r3, r5
 80044c6:	d417      	bmi.n	80044f8 <_malloc_r+0x8c>
 80044c8:	2b0b      	cmp	r3, #11
 80044ca:	d903      	bls.n	80044d4 <_malloc_r+0x68>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	441c      	add	r4, r3
 80044d0:	6025      	str	r5, [r4, #0]
 80044d2:	e004      	b.n	80044de <_malloc_r+0x72>
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	42a2      	cmp	r2, r4
 80044d8:	bf0c      	ite	eq
 80044da:	600b      	streq	r3, [r1, #0]
 80044dc:	6053      	strne	r3, [r2, #4]
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 f85a 	bl	8004598 <__malloc_unlock>
 80044e4:	f104 000b 	add.w	r0, r4, #11
 80044e8:	1d23      	adds	r3, r4, #4
 80044ea:	f020 0007 	bic.w	r0, r0, #7
 80044ee:	1ac2      	subs	r2, r0, r3
 80044f0:	d0cc      	beq.n	800448c <_malloc_r+0x20>
 80044f2:	1a1b      	subs	r3, r3, r0
 80044f4:	50a3      	str	r3, [r4, r2]
 80044f6:	e7c9      	b.n	800448c <_malloc_r+0x20>
 80044f8:	4622      	mov	r2, r4
 80044fa:	6864      	ldr	r4, [r4, #4]
 80044fc:	e7cc      	b.n	8004498 <_malloc_r+0x2c>
 80044fe:	1cc4      	adds	r4, r0, #3
 8004500:	f024 0403 	bic.w	r4, r4, #3
 8004504:	42a0      	cmp	r0, r4
 8004506:	d0e3      	beq.n	80044d0 <_malloc_r+0x64>
 8004508:	1a21      	subs	r1, r4, r0
 800450a:	4630      	mov	r0, r6
 800450c:	f000 f82e 	bl	800456c <_sbrk_r>
 8004510:	3001      	adds	r0, #1
 8004512:	d1dd      	bne.n	80044d0 <_malloc_r+0x64>
 8004514:	e7cf      	b.n	80044b6 <_malloc_r+0x4a>
 8004516:	bf00      	nop
 8004518:	20000164 	.word	0x20000164
 800451c:	20000168 	.word	0x20000168

08004520 <_realloc_r>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	4607      	mov	r7, r0
 8004524:	4614      	mov	r4, r2
 8004526:	460e      	mov	r6, r1
 8004528:	b921      	cbnz	r1, 8004534 <_realloc_r+0x14>
 800452a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800452e:	4611      	mov	r1, r2
 8004530:	f7ff bf9c 	b.w	800446c <_malloc_r>
 8004534:	b922      	cbnz	r2, 8004540 <_realloc_r+0x20>
 8004536:	f7ff ff49 	bl	80043cc <_free_r>
 800453a:	4625      	mov	r5, r4
 800453c:	4628      	mov	r0, r5
 800453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004540:	f000 f830 	bl	80045a4 <_malloc_usable_size_r>
 8004544:	42a0      	cmp	r0, r4
 8004546:	d20f      	bcs.n	8004568 <_realloc_r+0x48>
 8004548:	4621      	mov	r1, r4
 800454a:	4638      	mov	r0, r7
 800454c:	f7ff ff8e 	bl	800446c <_malloc_r>
 8004550:	4605      	mov	r5, r0
 8004552:	2800      	cmp	r0, #0
 8004554:	d0f2      	beq.n	800453c <_realloc_r+0x1c>
 8004556:	4631      	mov	r1, r6
 8004558:	4622      	mov	r2, r4
 800455a:	f7ff fbf7 	bl	8003d4c <memcpy>
 800455e:	4631      	mov	r1, r6
 8004560:	4638      	mov	r0, r7
 8004562:	f7ff ff33 	bl	80043cc <_free_r>
 8004566:	e7e9      	b.n	800453c <_realloc_r+0x1c>
 8004568:	4635      	mov	r5, r6
 800456a:	e7e7      	b.n	800453c <_realloc_r+0x1c>

0800456c <_sbrk_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d06      	ldr	r5, [pc, #24]	; (8004588 <_sbrk_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fd fb14 	bl	8001ba4 <_sbrk>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_sbrk_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_sbrk_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	2000020c 	.word	0x2000020c

0800458c <__malloc_lock>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__malloc_lock+0x8>)
 800458e:	f000 b811 	b.w	80045b4 <__retarget_lock_acquire_recursive>
 8004592:	bf00      	nop
 8004594:	20000214 	.word	0x20000214

08004598 <__malloc_unlock>:
 8004598:	4801      	ldr	r0, [pc, #4]	; (80045a0 <__malloc_unlock+0x8>)
 800459a:	f000 b80c 	b.w	80045b6 <__retarget_lock_release_recursive>
 800459e:	bf00      	nop
 80045a0:	20000214 	.word	0x20000214

080045a4 <_malloc_usable_size_r>:
 80045a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a8:	1f18      	subs	r0, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfbc      	itt	lt
 80045ae:	580b      	ldrlt	r3, [r1, r0]
 80045b0:	18c0      	addlt	r0, r0, r3
 80045b2:	4770      	bx	lr

080045b4 <__retarget_lock_acquire_recursive>:
 80045b4:	4770      	bx	lr

080045b6 <__retarget_lock_release_recursive>:
 80045b6:	4770      	bx	lr

080045b8 <_init>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr

080045c4 <_fini>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr
